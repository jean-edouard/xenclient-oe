Index: linux-3.18.16/drivers/tty/hvc/hvc_console.c
===================================================================
--- linux-3.18.16.orig/drivers/tty/hvc/hvc_console.c	2015-07-07 16:18:41.056509681 +0200
+++ linux-3.18.16/drivers/tty/hvc/hvc_console.c	2015-07-08 15:40:33.118736200 +0200
@@ -46,6 +46,9 @@
 
 #include "hvc_console.h"
 
+#define DPRINTK(fmt, ...) \
+    printk(KERN_ERR "HUGINN:%s:%d: " fmt "\n", "drivers/tty/hvm/hvc_console.c", __LINE__, ##__VA_ARGS__)
+
 #define HVC_MAJOR	229
 #define HVC_MINOR	0
 
@@ -318,6 +321,7 @@
 	struct hvc_struct *hp;
 	int rc;
 
+        DPRINTK("%s: entering...", __FUNCTION__);
 	/* Auto increments kref reference if found. */
 	if (!(hp = hvc_get_by_index(tty->index)))
 		return -ENODEV;
@@ -340,6 +344,7 @@
 	unsigned long flags;
 	int rc = 0;
 
+        DPRINTK("%s: entering...", __FUNCTION__);
 	spin_lock_irqsave(&hp->port.lock, flags);
 	/* Check and then increment for fast path open. */
 	if (hp->port.count++ > 0) {
@@ -382,6 +387,7 @@
 	struct hvc_struct *hp;
 	unsigned long flags;
 
+        DPRINTK("%s: entering...", __FUNCTION__);
 	if (tty_hung_up_p(filp))
 		return;
 
@@ -430,6 +436,7 @@
 {
 	struct hvc_struct *hp = tty->driver_data;
 
+        DPRINTK("%s: entering...", __FUNCTION__);
 	tty_port_put(&hp->port);
 }
 
@@ -801,17 +808,22 @@
 #ifdef CONFIG_CONSOLE_POLL
 static int hvc_poll_init(struct tty_driver *driver, int line, char *options)
 {
+        DPRINTK("%s: entering...", __FUNCTION__);
 	return 0;
 }
 
 static int hvc_poll_get_char(struct tty_driver *driver, int line)
 {
 	struct tty_struct *tty = driver->ttys[0];
-	struct hvc_struct *hp = tty->driver_data;
+	struct hvc_struct *hp = tty ? tty->driver_data : NULL;
+	struct hv_ops *ops = (hp && hp->ops) ? hp->ops : cons_ops[last_hvc];
+	uint32_t vtno = hp ? hp->vtermno : vtermnos[last_hvc];
 	int n;
 	char ch;
 
-	n = hp->ops->get_chars(hp->vtermno, &ch, 1);
+        // XXX: WE SHOULDN'T GO THERE!!!!
+        DPRINTK("%s: entering...", __FUNCTION__);
+	n = ops->get_chars(vtno, &ch, 1);
 
 	if (n == 0)
 		return NO_POLL_CHAR;
@@ -822,11 +834,15 @@
 static void hvc_poll_put_char(struct tty_driver *driver, int line, char ch)
 {
 	struct tty_struct *tty = driver->ttys[0];
-	struct hvc_struct *hp = tty->driver_data;
+	struct hvc_struct *hp = tty ? tty->driver_data : NULL;
+	struct hv_ops *ops = (hp && hp->ops) ? hp->ops : cons_ops[last_hvc];
+	uint32_t vtno = hp ? hp->vtermno : vtermnos[last_hvc];
+
 	int n;
 
+        DPRINTK("%s: entering...", __FUNCTION__);
 	do {
-		n = hp->ops->put_chars(hp->vtermno, &ch, 1);
+		n = ops->put_chars(vtno, &ch, 1);
 	} while (n <= 0);
 }
 #endif
Index: linux-3.18.16/kernel/debug/debug_core.c
===================================================================
--- linux-3.18.16.orig/kernel/debug/debug_core.c	2015-07-07 16:18:41.199841469 +0200
+++ linux-3.18.16/kernel/debug/debug_core.c	2015-07-08 15:36:41.681192676 +0200
@@ -592,12 +592,14 @@
 		kgdb_roundup_cpus(flags);
 #endif
 
+#ifndef CONFIG_XEN
 	/*
 	 * Wait for the other CPUs to be notified and be waiting for us:
 	 */
 	while (kgdb_do_roundup && (atomic_read(&masters_in_kgdb) +
 				atomic_read(&slaves_in_kgdb)) != online_cpus)
 		cpu_relax();
+#endif
 
 	/*
 	 * At this point the primary processor is completely
