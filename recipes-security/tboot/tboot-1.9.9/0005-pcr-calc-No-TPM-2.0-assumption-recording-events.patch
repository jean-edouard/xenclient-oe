From 22be982df4f991500538bce68c107d2b5c631f41 Mon Sep 17 00:00:00 2001
From: Eric Chanudet <chanudete@ainfosec.com>
Date: Thu, 7 Mar 2019 16:45:23 -0500
Subject: [PATCH 5/9] pcr-calc: No TPM 2.0 assumption recording events.

Change tpm_record_event() to switch on TPM version specified in the
struct tpm.

Signed-off-by: Eric Chanudet <chanudete@ainfosec.com>
---
 pcr-calc/tpm.c | 53 ++++++++++++++++++++++++++++----------------------
 1 file changed, 30 insertions(+), 23 deletions(-)

diff --git a/pcr-calc/tpm.c b/pcr-calc/tpm.c
index eb2939d..3cd521a 100644
--- a/pcr-calc/tpm.c
+++ b/pcr-calc/tpm.c
@@ -193,37 +193,44 @@ bool tpm_record_event(struct tpm *t, uint16_t alg, void *e)
 
 	bank = &t->banks[bnum];
 
-	if (t->version == TPM12) {
-		tpm12_pcr_event_t *event = e;
+	switch (t->version) {
+		case TPM12: {
+			tpm12_pcr_event_t *event = e;
 
-		if (event->pcr_index == 255)
-			return true;
-
-		if (event->pcr_index > 23)
-			return false;
+			if (event->pcr_index == 255)
+				return true;
 
-		p = &bank->pcrs[event->pcr_index];
+			if (event->pcr_index >= MAX_PCR)
+				return false;
 
-		type = event->type;
-		evt_hash = (tb_hash_t *) event->digest;
-	} else {
-		uint32_t pcr_num;
+			p = &bank->pcrs[event->pcr_index];
 
-		pcr_num = *((uint32_t *) e);
-		if (pcr_num > 23) {
-			if (pcr_num == 255)
-				return true;
-			else
-				return false;
+			type = event->type;
+			evt_hash = (tb_hash_t *) event->digest;
+			break;
 		}
+		case TPM20: {
+			uint32_t pcr_num;
 
-		p = &bank->pcrs[pcr_num];
+			pcr_num = *((uint32_t *) e);
+			if (pcr_num >= MAX_PCR) {
+				if (pcr_num == 255)
+					return true;
+				else
+					return false;
+			}
 
-		e += sizeof(uint32_t);
-		type = *((uint32_t *) e);
+			p = &bank->pcrs[pcr_num];
 
-		e += sizeof(uint32_t);
-		evt_hash = (tb_hash_t *) e;
+			e += sizeof(uint32_t);
+			type = *((uint32_t *) e);
+
+			e += sizeof(uint32_t);
+			evt_hash = (tb_hash_t *) e;
+			break;
+		}
+		default:
+			return false;
 	}
 
 	if (!pcr_record_event(p, alg, type, evt_hash))
-- 
2.21.0

