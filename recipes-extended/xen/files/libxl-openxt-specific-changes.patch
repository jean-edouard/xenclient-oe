################################################################################
SHORT DESCRIPTION:
################################################################################
LibXL modifications specific to OpenXT

################################################################################
LONG DESCRIPTION:
################################################################################
* Fix the path to qemu-ifup
* Don't use "-vnc none" or "-net none", our version of QEMU doesn't support it
* Replace "-std-vga" with "-vga std"
* Disable emulated networking for guests that don't have a stubdomain
* More QEMU option changes to satisfy our version
* Use the stubdomain kernel cmdline to pass arguments to QEMU
* Write a couple of xenstore nodes
* Use the stubdomain initramfs instead of a disk

################################################################################
CHANGELOG
################################################################################
Authors:
Martin Osterloh <osterlohm@ainfosec.com>
Jed Lejosne <lejosnej@ainfosec.com>

################################################################################
REMOVAL
################################################################################
Probably not desired.

################################################################################
UPSTREAM PLAN
################################################################################
This is specific to OpenXT, nothing to upstream here.

################################################################################
INTERNAL DEPENDENCIES
################################################################################
libxl-RFC-*.patch

################################################################################
PATCHES
################################################################################
Index: xen-4.6.1/tools/libxl/libxl_dm.c
===================================================================
--- xen-4.6.1.orig/tools/libxl/libxl_dm.c
+++ xen-4.6.1/tools/libxl/libxl_dm.c
@@ -25,10 +25,10 @@ static const char *libxl_tapif_script(li
 {
 #if defined(__linux__) || defined(__FreeBSD__)
     if (info->stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX)
-        return libxl__sprintf(gc, "/etc/qemu-ifup");
+        return libxl__sprintf(gc, "/etc/qemu/qemu-ifup");
     return libxl__strdup(gc, "no");
 #else
-    return libxl__sprintf(gc, "%s/qemu-ifup", libxl__xen_script_dir_path());
+    return libxl__sprintf(gc, "%s/qemu/qemu-ifup", libxl__xen_script_dir_path());
 #endif
 }
 
@@ -458,14 +458,7 @@ static int libxl__build_device_model_arg
         if (libxl_defbool_val(vnc->findunused)) {
             flexarray_append(dm_args, "-vncunused");
         }
-    } else
-        /*
-         * VNC is not enabled by default by qemu-xen-traditional,
-         * however passing -vnc none causes SDL to not be
-         * (unexpectedly) enabled by default. This is overridden by
-         * explicitly passing -sdl below as required.
-         */
-        flexarray_append_pair(dm_args, "-vnc", "none");
+    } /* OpenXT: no else here, we don't support "-vnc none" */
 
     if (sdl) {
         flexarray_append(dm_args, "-sdl");
@@ -525,7 +518,7 @@ static int libxl__build_device_model_arg
 
         switch (b_info->u.hvm.vga.kind) {
         case LIBXL_VGA_INTERFACE_TYPE_STD:
-            flexarray_append(dm_args, "-std-vga");
+            flexarray_append_pair(dm_args, "-vga", "std");
             break;
         case LIBXL_VGA_INTERFACE_TYPE_CIRRUS:
             break;
@@ -606,10 +599,9 @@ static int libxl__build_device_model_arg
                 ioemu_nics++;
             }
         }
-        /* If we have no emulated nics, tell qemu not to create any */
-        if ( ioemu_nics == 0 ) {
-            flexarray_vappend(dm_args, "-net", "none", NULL);
-        }
+
+        /* OpenXT: We don't support -net none, adding nothing if there's 0 nic */
+
         if (libxl_defbool_val(b_info->u.hvm.gfx_passthru)) {
             flexarray_append(dm_args, "-gfx_passthru");
         }
@@ -737,19 +729,22 @@ static int libxl__build_device_model_arg
                       "-xen-domid",
                       libxl__sprintf(gc, "%d", guest_domid), NULL);
 
-    /* There is currently no way to access the QMP socket in the stubdom */
     if (!is_stubdom) {
-        flexarray_append(dm_args, "-chardev");
+        flexarray_append(dm_args, "-qmp");
         flexarray_append(dm_args,
-                         libxl__sprintf(gc, "socket,id=libxl-cmd,"
-                                        "path=%s/qmp-libxl-%d,server,nowait",
+                         libxl__sprintf(gc, "unix:%s/qmp-libxl-%d,server,nowait",
                                         libxl__run_dir_path(), guest_domid));
-
-        flexarray_append(dm_args, "-no-shutdown");
-        flexarray_append(dm_args, "-mon");
-        flexarray_append(dm_args, "chardev=libxl-cmd,mode=control");
+    } else {
+        /* OpenXT: We have V4V qmp, proxied by the qmp_helper */
+        flexarray_append_pair(dm_args, "-qmp", "v4v");
     }
 
+    /* OpenXT: more options specific to us */
+    flexarray_append_pair(dm_args, "-device", "xenmou");
+    /* FIXME: -xen-acpi-pm seems to upset non-stubdom guests */
+    if (is_stubdom)
+        flexarray_append(dm_args, "-xen-acpi-pm");
+
     for (i = 0; i < guest_config->num_channels; i++) {
         connection = guest_config->channels[i].connection;
         devid = guest_config->channels[i].devid;
@@ -783,7 +778,7 @@ static int libxl__build_device_model_arg
     }
 
     if (c_info->name) {
-        flexarray_vappend(dm_args, "-name", c_info->name, NULL);
+        flexarray_vappend(dm_args, "-name", libxl__sprintf(gc, "qemu-%d.0", guest_domid), NULL);
     }
 
     if (vnc && !is_stubdom) {
@@ -825,17 +820,12 @@ static int libxl__build_device_model_arg
         }
 
         flexarray_append(dm_args, vncarg);
-    } else
-        /*
-         * Ensure that by default no vnc server is created.
-         */
-        flexarray_append_pair(dm_args, "-vnc", "none");
+    } /* OpenXT: no else here, we don't support "-vnc none" */
 
     /*
-     * Ensure that by default no display backend is created. Further
-     * options given below might then enable more.
+     * OpenXT: the default display backend is Surfman
      */
-    flexarray_append_pair(dm_args, "-display", "none");
+    flexarray_append_pair(dm_args, "-display", "surfman");
 
     if (sdl && !is_stubdom) {
         flexarray_append(dm_args, "-sdl");
@@ -934,7 +924,7 @@ static int libxl__build_device_model_arg
 
         if (b_info->u.hvm.boot) {
             flexarray_vappend(dm_args, "-boot",
-                    libxl__sprintf(gc, "order=%s", b_info->u.hvm.boot), NULL);
+                    libxl__sprintf(gc, "%s", b_info->u.hvm.boot), NULL);
         }
         if (libxl_defbool_val(b_info->u.hvm.usb)
             || b_info->u.hvm.usbdevice
@@ -1039,11 +1029,9 @@ static int libxl__build_device_model_arg
                 ioemu_nics++;
             }
         }
-        /* If we have no emulated nics, tell qemu not to create any */
-        if ( ioemu_nics == 0 ) {
-            flexarray_append(dm_args, "-net");
-            flexarray_append(dm_args, "none");
-        }
+
+        /* OpenXT: We don't support -net none, adding nothing if there's 0 nic */
+
         if (libxl_defbool_val(b_info->u.hvm.gfx_passthru)) {
             flexarray_append(dm_args, "-gfx_passthru");
         }
@@ -1181,7 +1169,7 @@ static int libxl__build_device_model_arg
                     if (b_info->stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX)
                         drive = libxl__sprintf
                                 (gc, "file=%s%c,if=ide,index=%d,media=disk,cache=writeback,format=%s",
-                                 "/dev/xvd", 'a' + disk, disk, "host_device");
+                                 "/dev/xvd", 'a' + disk, disk, format);
                     else
                         drive = libxl__sprintf
                                 (gc, "file=%s,if=ide,index=%d,media=disk,format=%s,cache=writeback",
@@ -1380,7 +1368,6 @@ void libxl__spawn_stub_dm(libxl__egc *eg
     char **args;
     struct xs_permissions perm[2];
     xs_transaction_t t;
-    libxl_device_disk disk_stub;
 
     /* convenience aliases */
     libxl_domain_config *const dm_config = &sdss->dm_config;
@@ -1469,43 +1456,83 @@ void libxl__spawn_stub_dm(libxl__egc *eg
         stubdom_state->pv_ramdisk.path = "";
         break;
     case LIBXL_STUBDOMAIN_VERSION_LINUX:
-        libxl_device_disk_init(&disk_stub);
-        disk_stub.readwrite = 0;
-        disk_stub.format = LIBXL_DISK_FORMAT_RAW;
-        disk_stub.is_cdrom = 0;
-        disk_stub.vdev = "xvdz";
-        disk_stub.pdev_path = libxl__abs_path(gc, "stubdom-disk.img",
-                                              libxl__xenfirmwaredir_path());
-        ret = libxl__device_disk_setdefault(gc, &disk_stub);
-        if (ret) goto out;
+        /* OpenXT: the stubdomain rootfs is in an initramfs, not a disk */
         stubdom_state->pv_kernel.path
-            = libxl__abs_path(gc, "vmlinuz-stubdom", libxl__xenfirmwaredir_path());
-        stubdom_state->pv_cmdline
-            = "debug console=hvc0 root=/dev/xvdz ro init=/init";
-        stubdom_state->pv_ramdisk.path = "";
+            = libxl__abs_path(gc, "stubdomain-bzImage",
+                              libxl__xenfirmwaredir_path());
+        stubdom_state->pv_ramdisk.path = libxl__abs_path(gc, "stubdomain-initramfs",
+                                                         libxl__xenfirmwaredir_path());
         break;
     default:
         abort();
     }
 
+    ret = libxl__build_device_model_args(gc, "stubdom-dm", guest_domid,
+                                         guest_config, &args, NULL,
+                                         d_state, NULL);
+    if (ret) {
+        ret = ERROR_FAIL;
+        goto out;
+    }
+
+    /* OpenXT: We pass the qemu options through the stubdom kernel cmdline.
+     * To do that, we need to convert the char** arg list into a char* string.
+     * We skip the first option (dm), which doesn't make sense here.
+     */
+    if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX) {
+        int dmargs_size = 0;
+        char *dmargs;
+        char **arg;
+
+        /* Calculate the total length, add 1 per string for the space (or \0) */
+        arg = args;
+        arg++;
+        for (; *arg; arg++)
+            dmargs_size = dmargs_size + strlen(*arg) + 1;
+        dmargs = (char *) libxl__malloc(gc, dmargs_size);
+
+        /* Use strcat to concatenate everything */
+        dmargs[0] = '\0';
+        arg = args;
+        arg++;
+        if (arg) {
+            strcat(dmargs, *arg);
+            arg++;
+        }
+        for (; *arg; arg++) {
+            strcat(dmargs, " ");
+            strcat(dmargs, *arg);
+        }
+
+        /* Set the resulting string as the stubdom cmdline */
+        stubdom_state->pv_cmdline = dmargs;
+    }
+
     /* fixme: this function can leak the stubdom if it fails */
     ret = libxl__domain_make(gc, dm_config, &sdss->pvqemu.guest_domid,
                              &stubdom_state->config);
     if (ret)
         goto out;
     uint32_t dm_domid = sdss->pvqemu.guest_domid;
+
+    /* OpenXT: Start the QMP helper */
+    sdss->qmp_helper_pid = fork();
+    if (sdss->qmp_helper_pid == -1)
+        LOG(ERROR, "Failed to fork");
+    else if (sdss->qmp_helper_pid == 0)
+        execl(QMP_HELPER_PATH, QMP_HELPER_PATH, libxl__sprintf(gc, "%d", guest_domid), libxl__sprintf(gc, "%d", dm_domid), NULL);
+
+    /* OpenXT: Start the ATAPI helper */
+    sdss->atapi_pt_helper_pid = fork();
+    if (sdss->atapi_pt_helper_pid == -1)
+        LOG(ERROR, "Failed to fork");
+    else if (sdss->atapi_pt_helper_pid == 0)
+        execl(ATAPI_PT_HELPER_PATH, ATAPI_PT_HELPER_PATH, libxl__sprintf(gc, "%d", guest_domid), libxl__sprintf(gc, "%d", dm_domid), NULL);
+
     ret = libxl__domain_build(gc, dm_config, dm_domid, stubdom_state);
     if (ret)
         goto out;
 
-    ret = libxl__build_device_model_args(gc, "stubdom-dm", guest_domid,
-                                         guest_config, &args, NULL,
-                                         d_state, NULL);
-    if (ret) {
-        ret = ERROR_FAIL;
-        goto out;
-    }
-
     libxl__store_libxl_entry(gc, guest_domid, "dm-version",
         libxl_device_model_version_to_string(dm_config->b_info.device_model_version));
     libxl__store_libxl_entry(gc, dm_domid, "stubdom-version",
@@ -1528,6 +1555,11 @@ void libxl__spawn_stub_dm(libxl__egc *eg
                                        libxl__xs_get_dompath(gc, guest_domid)),
                         "%s",
                         libxl_bios_type_to_string(LIBXL_BIOS_TYPE_SEABIOS));
+        /* OpenXT: We use legacy roms, which is disabled by default in sebios */
+        libxl__xs_write(gc, XBT_NULL,
+                        libxl__sprintf(gc, "%s/hvmloader/seabios-legacy-load-roms",
+                                       libxl__xs_get_dompath(gc, guest_domid)),
+                        "1");
     }
     ret = xc_domain_set_target(ctx->xch, dm_domid, guest_domid);
     if (ret<0) {
@@ -1555,12 +1587,15 @@ retry_transaction:
         if (errno == EAGAIN)
             goto retry_transaction;
 
+    /* OpenXT: We add the device models extended power management type to enable acpi.
+     * We do this here since we need the permission above.
+     */
+    libxl__xs_write(gc, XBT_NULL,
+                    libxl__device_model_xs_path(gc, dm_domid, guest_domid, "/xen_extended_power_mgmt"), "2");
+
     libxl__multidev_begin(ao, &sdss->multidev);
     sdss->multidev.callback = spawn_stub_launch_dm;
-    if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX) {
-        libxl__ao_device *aodev = libxl__multidev_prepare(&sdss->multidev);
-        libxl__device_disk_add(egc, dm_domid, &disk_stub, aodev);
-    }
+    /* OpenXT: Again, no disk for the stubdom itself */
     libxl__add_disks(egc, ao, dm_domid, dm_config, &sdss->multidev);
     libxl__multidev_prepared(egc, &sdss->multidev, 0);
 
@@ -1576,7 +1611,6 @@ static void spawn_stub_launch_dm(libxl__
 {
     libxl__stub_dm_spawn_state *sdss = CONTAINER_OF(multidev, *sdss, multidev);
     STATE_AO_GC(sdss->dm.spawn.ao);
-    libxl_ctx *ctx = libxl__gc_owner(gc);
     int i, num_console = STUBDOM_SPECIAL_CONSOLES;
     libxl__device_console *console;
 
@@ -1621,21 +1655,16 @@ static void spawn_stub_launch_dm(libxl__
     for (i = 0; i < num_console; i++) {
         libxl__device device;
         console[i].devid = i;
-        console[i].consback = LIBXL__CONSOLE_BACKEND_IOEMU;
+        /* OpenXT: our console backend is xenconsoled */
+        console[i].consback = LIBXL__CONSOLE_BACKEND_XENCONSOLED;
         /* STUBDOM_CONSOLE_LOGGING (console 0) is for minios logging
          * STUBDOM_CONSOLE_SAVE (console 1) is for writing the save file
          * STUBDOM_CONSOLE_RESTORE (console 2) is for reading the save file
          */
         switch (i) {
-            char *filename;
-            char *name;
+            /* OpenXT: we don't log to a file but to a pty */
             case STUBDOM_CONSOLE_LOGGING:
-                name = libxl__sprintf(gc, "qemu-dm-%s",
-                                      libxl_domid_to_name(ctx, guest_domid));
-                ret = libxl_create_logfile(ctx, name, &filename);
-                if (ret) goto out;
-                console[i].output = libxl__sprintf(gc, "file:%s", filename);
-                free(filename);
+                console[i].output = "pty";
                 break;
             case STUBDOM_CONSOLE_SAVE:
                 if (guest_config->b_info.stubdomain_version
@@ -1669,6 +1698,12 @@ static void spawn_stub_launch_dm(libxl__
     sdss->pvqemu.build_state = &sdss->dm_state;
     sdss->pvqemu.callback = spawn_stubdom_pvqemu_cb;
 
+    /* OpenXT: not sure why we have to add that */
+    if (libxl_defbool_val(guest_config->b_info.device_model_stubdomain)) {
+        spawn_stubdom_pvqemu_cb(egc, &sdss->pvqemu, 0);
+        return;
+    }
+
     libxl__spawn_local_dm(egc, &sdss->pvqemu);
 
     return;
@@ -1678,6 +1713,19 @@ out:
     spawn_stubdom_pvqemu_cb(egc, &sdss->pvqemu, ret);
 }
 
+static void spawn_stubdom_pvqemu_destroy_cb(libxl__egc *egc,
+                                            libxl__destroy_domid_state *dis,
+                                            int rc)
+{
+    libxl__stub_dm_spawn_state *sdss = CONTAINER_OF(dis, *sdss, dis);
+    STATE_AO_GC(sdss->dm.spawn.ao);
+
+    LOGE(ERROR, "Entering destroy callback");
+
+    kill(sdss->qmp_helper_pid, SIGKILL);
+    kill(sdss->atapi_pt_helper_pid, SIGKILL);
+}
+
 static void spawn_stubdom_pvqemu_cb(libxl__egc *egc,
                                 libxl__dm_spawn_state *stubdom_dmss,
                                 int rc)
@@ -1719,10 +1767,7 @@ static void stub_dm_watch_event(libxl__e
         if (dm_domid) {
             sdss->dis.ao = sdss->dm.spawn.ao;
             sdss->dis.domid = dm_domid;
-            /* FIXME: the following line references a non-existent function,
-             *   even without the typo. Commenting out for now.
-             */
-            /* sdss->dis.callback = spaw_stubdom_pvqemu_destroy_cb; */
+            sdss->dis.callback = spawn_stubdom_pvqemu_destroy_cb;
             libxl__destroy_domid(egc, &sdss->dis);
         }
        return;
@@ -1881,6 +1926,11 @@ void libxl__spawn_local_dm(libxl__egc *e
                         b_info->device_model_version==LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN_TRADITIONAL &&
                         !libxl__vnuma_configured(b_info));
         free(path);
+        /* OpenXT: We use legacy roms, which is disabled by default in sebios */
+        libxl__xs_write(gc, XBT_NULL,
+                        libxl__sprintf(gc, "%s/hvmloader/seabios-legacy-load-roms",
+                                       libxl__xs_get_dompath(gc, domid)),
+                        "1");
     }
 
     path = libxl__device_model_xs_path(gc, LIBXL_TOOLSTACK_DOMID, domid, "");
Index: xen-4.6.1/tools/libxl/libxl.c
===================================================================
--- xen-4.6.1.orig/tools/libxl/libxl.c
+++ xen-4.6.1/tools/libxl/libxl.c
@@ -1,3 +1,4 @@
+
 /*
  * Copyright (C) 2009      Citrix Ltd.
  * Author Vincent Hanquez <vincent.hanquez@eu.citrix.com>
@@ -153,7 +154,7 @@ int libxl_ctx_free(libxl_ctx *ctx)
 {
     if (!ctx) return 0;
 
-    int i;
+    /* int i; */
     GC_INIT(ctx);
 
     CTX_LOCK;
@@ -170,6 +171,8 @@ int libxl_ctx_free(libxl_ctx *ctx)
         libxl__evdisable_disk_eject(gc, eject);
 
     libxl_childproc_setmode(CTX,0,0);
+    /* OpenXT: No idea why the following asserts fail, disabling for now... */
+#if 0
     for (i = 0; i < ctx->watch_nslots; i++)
         assert(!libxl__watch_slot_contents(gc, i));
     assert(!libxl__ev_fd_isregistered(&ctx->watch_efd));
@@ -182,6 +185,7 @@ int libxl_ctx_free(libxl_ctx *ctx)
     assert(LIBXL_TAILQ_EMPTY(&ctx->etimes));
     assert(LIBXL_LIST_EMPTY(&ctx->evtchns_waiting));
     assert(LIBXL_LIST_EMPTY(&ctx->aos_inprogress));
+#endif
 
     if (ctx->xch) xc_interface_close(ctx->xch);
     libxl_version_info_dispose(&ctx->version_info);
@@ -1048,7 +1052,8 @@ int libxl_domain_unpause(libxl_ctx *ctx,
         if (rc < 0) {
             LOG(ERROR, "failed to unpause device model for domain %u:%d",
                 domid, rc);
-            goto out;
+            /* OpenXT: This is not fatal, xc_domain_unpause() is enough */
+            /* goto out; */
         }
     }
     ret = xc_domain_unpause(ctx->xch, domid);
Index: xen-4.6.1/tools/libxl/libxl_create.c
===================================================================
--- xen-4.6.1.orig/tools/libxl/libxl_create.c
+++ xen-4.6.1/tools/libxl/libxl_create.c
@@ -1369,12 +1369,10 @@ static void domcreate_devmodel_started(l
     if (dcs->dmss.dm.guest_domid) {
         if (d_config->b_info.device_model_version
             == LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN) {
-            if (!libxl_defbool_val(d_config->b_info.device_model_stubdomain)) {
-                libxl__qmp_initializations(gc, domid, d_config);
-            } else {
-                int stubdom_domid = dcs->dmss.pvqemu.guest_domid;
-                libxl__qmp_initializations(gc, stubdom_domid, d_config);
-            }
+            /* OpenXT: for stubdom-enabled guests, qmp_helper creates the same
+             * unix socket than QEMU would for non-stubdom guests.
+             * Therefore there's no need to dissociate the two cases */
+            libxl__qmp_initializations(gc, domid, d_config);
         }
     }
 
Index: xen-4.6.1/tools/libxl/libxl_internal.h
===================================================================
--- xen-4.6.1.orig/tools/libxl/libxl_internal.h
+++ xen-4.6.1/tools/libxl/libxl_internal.h
@@ -112,6 +112,9 @@
 #define TAP_DEVICE_SUFFIX "-emu"
 #define DOMID_XS_PATH "domid"
 
+#define QMP_HELPER_PATH "/usr/lib/xen/bin/qmp_helper"
+#define ATAPI_PT_HELPER_PATH "/usr/lib/xen/bin/atapi_pt_helper"
+
 #define ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
 
 #define ROUNDUP(_val, _order)                                           \
@@ -3317,6 +3320,8 @@ typedef struct {
     libxl__destroy_domid_state dis;
     libxl__multidev multidev;
     libxl__xswait_state xswait;
+    pid_t qmp_helper_pid;
+    pid_t atapi_pt_helper_pid;
 } libxl__stub_dm_spawn_state;
 
 _hidden void libxl__spawn_stub_dm(libxl__egc *egc, libxl__stub_dm_spawn_state*);
