Index: xen-4.6.1/tools/libxl/libxl_dm.c
===================================================================
--- xen-4.6.1.orig/tools/libxl/libxl_dm.c
+++ xen-4.6.1/tools/libxl/libxl_dm.c
@@ -458,14 +458,14 @@ static int libxl__build_device_model_arg
         if (libxl_defbool_val(vnc->findunused)) {
             flexarray_append(dm_args, "-vncunused");
         }
-    } else
+    } //else
         /*
          * VNC is not enabled by default by qemu-xen-traditional,
          * however passing -vnc none causes SDL to not be
          * (unexpectedly) enabled by default. This is overridden by
          * explicitly passing -sdl below as required.
          */
-        flexarray_append_pair(dm_args, "-vnc", "none");
+        //        flexarray_append_pair(dm_args, "-vnc", "none");
 
     if (sdl) {
         flexarray_append(dm_args, "-sdl");
@@ -525,7 +525,7 @@ static int libxl__build_device_model_arg
 
         switch (b_info->u.hvm.vga.kind) {
         case LIBXL_VGA_INTERFACE_TYPE_STD:
-            flexarray_append(dm_args, "-std-vga");
+            flexarray_append_pair(dm_args, "-vga", " std");
             break;
         case LIBXL_VGA_INTERFACE_TYPE_CIRRUS:
             break;
@@ -822,17 +822,16 @@ static int libxl__build_device_model_arg
         }
 
         flexarray_append(dm_args, vncarg);
-    } else
+    } //else
         /*
          * Ensure that by default no vnc server is created.
          */
-        flexarray_append_pair(dm_args, "-vnc", "none");
+        //flexarray_append_pair(dm_args, "-vnc", "none");
 
     /*
-     * Ensure that by default no display backend is created. Further
-     * options given below might then enable more.
+     * surfman is our default backend
      */
-    flexarray_append_pair(dm_args, "-display", "none");
+    flexarray_append_pair(dm_args, "-display", "surfman");
 
     if (sdl && !is_stubdom) {
         flexarray_append(dm_args, "-sdl");
@@ -910,9 +909,7 @@ static int libxl__build_device_model_arg
 
         switch (b_info->u.hvm.vga.kind) {
         case LIBXL_VGA_INTERFACE_TYPE_STD:
-            flexarray_append_pair(dm_args, "-device",
-                GCSPRINTF("VGA,vgamem_mb=%d",
-                libxl__sizekb_to_mb(b_info->video_memkb)));
+            flexarray_append_pair(dm_args, "-vga", "std");
             break;
         case LIBXL_VGA_INTERFACE_TYPE_CIRRUS:
             flexarray_append_pair(dm_args, "-device",
@@ -931,7 +928,7 @@ static int libxl__build_device_model_arg
 
         if (b_info->u.hvm.boot) {
             flexarray_vappend(dm_args, "-boot",
-                    libxl__sprintf(gc, "order=%s", b_info->u.hvm.boot), NULL);
+                    libxl__sprintf(gc, "%s", b_info->u.hvm.boot), NULL);
         }
         if (libxl_defbool_val(b_info->u.hvm.usb)
             || b_info->u.hvm.usbdevice
@@ -1175,7 +1172,7 @@ static int libxl__build_device_model_arg
                     if (b_info->stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX)
                         drive = libxl__sprintf
                                 (gc, "file=%s,if=ide,index=%d,media=disk,cache=writeback,format=%s",
-                                 "/dev/xvda", disk, "host_device");
+                                 "/dev/xvda", disk, "raw");
                     else
                         drive = libxl__sprintf
                                 (gc, "file=%s,if=ide,index=%d,media=disk,format=%s,cache=writeback",
@@ -1187,6 +1184,7 @@ static int libxl__build_device_model_arg
 
             flexarray_append(dm_args, "-drive");
             flexarray_append(dm_args, drive);
+
         }
 
         switch (b_info->u.hvm.vendor_device) {
@@ -1372,7 +1370,6 @@ void libxl__spawn_stub_dm(libxl__egc *eg
     char **args;
     struct xs_permissions perm[2];
     xs_transaction_t t;
-    libxl_device_disk disk_stub;
 
     /* convenience aliases */
     libxl_domain_config *const dm_config = &sdss->dm_config;
@@ -1461,43 +1458,93 @@ void libxl__spawn_stub_dm(libxl__egc *eg
         stubdom_state->pv_ramdisk.path = "";
         break;
     case LIBXL_STUBDOMAIN_VERSION_LINUX:
-        libxl_device_disk_init(&disk_stub);
-        disk_stub.readwrite = 0;
-        disk_stub.format = LIBXL_DISK_FORMAT_RAW;
-        disk_stub.is_cdrom = 0;
-        disk_stub.vdev = "xvdz";
-        disk_stub.pdev_path = libxl__abs_path(gc, "stubdom-disk.img",
-                                              libxl__xenfirmwaredir_path());
-        ret = libxl__device_disk_setdefault(gc, &disk_stub);
-        if (ret) goto out;
         stubdom_state->pv_kernel.path
-            = libxl__abs_path(gc, "vmlinuz-stubdom", libxl__xenfirmwaredir_path());
-        stubdom_state->pv_cmdline
-            = "debug console=hvc0 root=/dev/xvdz ro init=/init";
-        stubdom_state->pv_ramdisk.path = "";
+            = libxl__abs_path(gc, "stubdomain-bzImage",
+                              libxl__xenfirmwaredir_path());
+
+        stubdom_state->pv_ramdisk.path = libxl__abs_path(gc, "stubdomain-initramfs",
+                                                         libxl__xenfirmwaredir_path());
         break;
     default:
         abort();
     }
 
+    ret = libxl__build_device_model_args(gc, "stubdom-dm", guest_domid,
+                                         guest_config, &args, NULL,
+                                         d_state, NULL);
+    if (ret) {
+        ret = ERROR_FAIL;
+        goto out;
+    }
+
+    /* We have collected the device model arguments.
+     * If we run a stubby, we must adjust the pv kernel cmdline BEFORE making the domain.
+     */
+    if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX) {
+        int dmargs_size;
+        int toggle;
+        char *dmargs;
+        char **arg;
+
+        dmargs_size = 0;
+        toggle = 0;
+        for (arg = args; *arg; arg++) {
+            if (toggle) {
+                dmargs_size = dmargs_size + strlen("qemu-1.0") + 1;
+                toggle = 0;
+            }
+            else
+                dmargs_size = dmargs_size + strlen(*arg) + 1;
+
+            if (strcmp(*arg, "-name")==0)
+                toggle = 1;
+        }
+        dmargs_size += strlen("-qmp v4v")+1;
+        dmargs_size += strlen("-device xenmou");
+        dmargs_size += strlen("-xen-acpi-pm");
+        dmargs_size++;
+        dmargs = (char *) libxl__malloc(gc, dmargs_size);
+
+        dmargs[0] = '\0';
+        for (arg = args; *arg; arg++) {
+            /* Omit "stubdom-dm" */
+            if (strcmp(*arg, "stubdom-dm")!=0) {
+                strcat(dmargs, " ");
+                if (toggle) {
+                    strcat(dmargs, libxl__sprintf(gc, "qemu-%d.0", guest_domid));
+                    toggle = 0;
+                }
+                else
+                    strcat(dmargs, *arg);
+            }
+
+            if (strcmp(*arg, "-name")==0)
+                toggle = 1;
+        }
+        strcat(dmargs, " ");
+        strcat(dmargs, "-qmp v4v");
+
+        strcat(dmargs, " ");
+        strcat(dmargs, "-device xenmou");
+
+        strcat(dmargs, " ");
+        strcat(dmargs, "-xen-acpi-pm");
+
+        stubdom_state->pv_cmdline
+            = libxl__sprintf(gc, "%s", dmargs);
+    }
+
     /* fixme: this function can leak the stubdom if it fails */
     ret = libxl__domain_make(gc, dm_config, &sdss->pvqemu.guest_domid,
                              &stubdom_state->config);
     if (ret)
         goto out;
+
     uint32_t dm_domid = sdss->pvqemu.guest_domid;
     ret = libxl__domain_build(gc, dm_config, dm_domid, stubdom_state);
     if (ret)
         goto out;
 
-    ret = libxl__build_device_model_args(gc, "stubdom-dm", guest_domid,
-                                         guest_config, &args, NULL,
-                                         d_state, NULL);
-    if (ret) {
-        ret = ERROR_FAIL;
-        goto out;
-    }
-
     libxl__store_libxl_entry(gc, guest_domid, "dm-version",
         libxl_device_model_version_to_string(dm_config->b_info.device_model_version));
     libxl__store_libxl_entry(gc, dm_domid, "stubdom-version",
@@ -1514,12 +1561,47 @@ void libxl__spawn_stub_dm(libxl__egc *eg
                    "%d", guest_domid);
     if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX) {
         /* qemu-xen is used as a dm in the stubdomain, so we set the bios
-         * accroding to this */
+         * according to this */
         libxl__xs_write(gc, XBT_NULL,
                         libxl__sprintf(gc, "%s/hvmloader/bios",
                                        libxl__xs_get_dompath(gc, guest_domid)),
                         "%s",
                         libxl_bios_type_to_string(LIBXL_BIOS_TYPE_SEABIOS));
+
+#if 0
+        libxl__xs_write(gc, XBT_NULL,
+                        libxl__sprintf(gc, "/local/domain/0/device-model/%d",
+                                       guest_domid), "%s" ,"");
+
+        LOGE(ERROR, "Prepping transaction");
+        /* We also have to set XS permissions to 'r' */
+        t = xs_transaction_start(ctx->xsh);
+        perm[0].id = dm_domid;
+        perm[0].perms = XS_PERM_OWNER;
+        perm[1].id = guest_domid;
+        perm[1].perms = XS_PERM_READ;
+        /*
+        perm[1].id = guest_domid;
+        perm[1].perms = XS_PERM_READ; */
+        //xs_set_permissions(ctx->xsh, t, libxl__sprintf(gc, "/local/domain/0/device-model/%d/xen_extended_power_mgmt", guest_domid), perm, ARRAY_SIZE(perm));
+
+        LOGE(ERROR, "%d, %d, %d, %s", guest_domid, dm_domid, ARRAY_SIZE(perm), libxl__sprintf(gc, "/local/domain/0/device-model/%d", guest_domid));
+        xs_set_permissions(ctx->xsh, t, libxl__sprintf(gc, "/local/domain/0/device-model/%d", guest_domid), perm, ARRAY_SIZE(perm));
+
+        if (!xs_transaction_end(ctx->xsh, t, 0))
+            LOGE(ERROR, "TRANSACTION FAILED!!!!!");
+
+        LOGE(ERROR, "set permissions for extended power management");
+#endif
+        /* We have to add seabios-legacy-roms in the guests XS node */
+        libxl__xs_write(gc, XBT_NULL,
+                        libxl__sprintf(gc, "%s/hvmloader/seabios-legacy-load-roms",
+                                       libxl__xs_get_dompath(gc, guest_domid)),
+                        "1");
+        /* XL needs confirmation that the toolstack runs in dom0. This can be moved somewhere more
+         * appropriate
+         */
+        libxl__xs_write(gc, XBT_NULL, "/local/domain/0/domid", "0");
     }
     ret = xc_domain_set_target(ctx->xch, dm_domid, guest_domid);
     if (ret<0) {
@@ -1536,23 +1618,33 @@ void libxl__spawn_stub_dm(libxl__egc *eg
     perm[1].id = guest_domid;
     perm[1].perms = XS_PERM_READ;
 retry_transaction:
+    LOGE(ERROR, "Doing THE transaction");
     t = xs_transaction_start(ctx->xsh);
     xs_mkdir(ctx->xsh, t,
              libxl__device_model_xs_path(gc, dm_domid, guest_domid, ""));
+    LOGE(ERROR, "mkdir %s", libxl__device_model_xs_path(gc, dm_domid, guest_domid, ""));
     xs_set_permissions(ctx->xsh, t,
                        libxl__device_model_xs_path(gc, dm_domid,
                                                    guest_domid, ""),
                        perm, ARRAY_SIZE(perm));
-    if (!xs_transaction_end(ctx->xsh, t, 0))
+    if (!xs_transaction_end(ctx->xsh, t, 0)) {
         if (errno == EAGAIN)
             goto retry_transaction;
+        else
+            LOGE(ERROR, "Got an error != EAGAIN");
+    }
+
+    /* We have to add the device models extended power management type to enable acpi
+     * in the stubby */
+    libxl__xs_write(gc, XBT_NULL,
+                    libxl__device_model_xs_path(gc, dm_domid, guest_domid, "/xen_extended_power_mgmt"), "2");
 
     libxl__multidev_begin(ao, &sdss->multidev);
     sdss->multidev.callback = spawn_stub_launch_dm;
-    if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX) {
-        libxl__ao_device *aodev = libxl__multidev_prepare(&sdss->multidev);
-        libxl__device_disk_add(egc, dm_domid, &disk_stub, aodev);
-    }
+    //    if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_LINUX) {
+    //    libxl__ao_device *aodev = libxl__multidev_prepare(&sdss->multidev);
+    //    libxl__device_disk_add(egc, dm_domid, &disk_stub, aodev);
+    //}
     libxl__add_disks(egc, ao, dm_domid, dm_config, &sdss->multidev);
     libxl__multidev_prepared(egc, &sdss->multidev, 0);
 
@@ -1568,7 +1660,6 @@ static void spawn_stub_launch_dm(libxl__
 {
     libxl__stub_dm_spawn_state *sdss = CONTAINER_OF(multidev, *sdss, multidev);
     STATE_AO_GC(sdss->dm.spawn.ao);
-    libxl_ctx *ctx = libxl__gc_owner(gc);
     int i, num_console = STUBDOM_SPECIAL_CONSOLES;
     libxl__device_console *console;
 
@@ -1613,35 +1704,27 @@ static void spawn_stub_launch_dm(libxl__
     for (i = 0; i < num_console; i++) {
         libxl__device device;
         console[i].devid = i;
-        console[i].consback = LIBXL__CONSOLE_BACKEND_IOEMU;
+        console[i].consback = LIBXL__CONSOLE_BACKEND_XENCONSOLED;
         /* STUBDOM_CONSOLE_LOGGING (console 0) is for minios logging
          * STUBDOM_CONSOLE_SAVE (console 1) is for writing the save file
          * STUBDOM_CONSOLE_RESTORE (console 2) is for reading the save file
          */
         switch (i) {
-            char *filename;
-            char *name;
             case STUBDOM_CONSOLE_LOGGING:
-                name = libxl__sprintf(gc, "qemu-dm-%s",
-                                      libxl_domid_to_name(ctx, guest_domid));
-                ret = libxl_create_logfile(ctx, name, &filename);
-                if (ret) goto out;
-                console[i].output = libxl__sprintf(gc, "file:%s", filename);
-                free(filename);
+                console[i].output = "pty";
                 break;
             case STUBDOM_CONSOLE_SAVE:
-                if (guest_config->b_info.stubdomain_version
-                      == LIBXL_STUBDOMAIN_VERSION_MINIOS) {
+                if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_MINIOS) {
                     console[i].output = libxl__sprintf(gc, "file:%s",
-                        libxl__device_model_savefile(gc, guest_domid));
+                                                       libxl__device_model_savefile(gc, guest_domid));
                     break;
                 }
             case STUBDOM_CONSOLE_RESTORE:
-                if (guest_config->b_info.stubdomain_version
-                      == LIBXL_STUBDOMAIN_VERSION_MINIOS) {
+                if (guest_config->b_info.stubdomain_version == LIBXL_STUBDOMAIN_VERSION_MINIOS) {
                     if (d_state->saved_state)
                         console[i].output =
-                            libxl__sprintf(gc, "pipe:%s", d_state->saved_state);
+                            libxl__sprintf(gc, "pipe:%s",
+                                           d_state->saved_state);
                     break;
                 }
             default:
@@ -1661,6 +1744,11 @@ static void spawn_stub_launch_dm(libxl__
     sdss->pvqemu.build_state = &sdss->dm_state;
     sdss->pvqemu.callback = spawn_stubdom_pvqemu_cb;
 
+    if (libxl_defbool_val(guest_config->b_info.device_model_stubdomain)) {
+        spawn_stubdom_pvqemu_cb(egc, &sdss->pvqemu, 0);
+        return;
+    }
+
     libxl__spawn_local_dm(egc, &sdss->pvqemu);
 
     return;
@@ -1711,7 +1799,7 @@ static void stub_dm_watch_event(libxl__e
         if (dm_domid) {
             sdss->dis.ao = sdss->dm.spawn.ao;
             sdss->dis.domid = dm_domid;
-            sdss->dis.callback = spaw_stubdom_pvqemu_destroy_cb;
+            //sdss->dis.callback = spawn_stubdom_pvqemu_destroy_cb;
             libxl__destroy_domid(egc, &sdss->dis);
         }
        return;
Index: xen-4.6.1/tools/libxl/libxl.c
===================================================================
--- xen-4.6.1.orig/tools/libxl/libxl.c
+++ xen-4.6.1/tools/libxl/libxl.c
@@ -153,7 +153,7 @@ int libxl_ctx_free(libxl_ctx *ctx)
 {
     if (!ctx) return 0;
 
-    int i;
+    //int i;
     GC_INIT(ctx);
 
     CTX_LOCK;
@@ -170,18 +170,21 @@ int libxl_ctx_free(libxl_ctx *ctx)
         libxl__evdisable_disk_eject(gc, eject);
 
     libxl_childproc_setmode(CTX,0,0);
+    /*
     for (i = 0; i < ctx->watch_nslots; i++)
         assert(!libxl__watch_slot_contents(gc, i));
     assert(!libxl__ev_fd_isregistered(&ctx->watch_efd));
     assert(!libxl__ev_fd_isregistered(&ctx->evtchn_efd));
-    assert(!libxl__ev_fd_isregistered(&ctx->sigchld_selfpipe_efd));
+    assert(!libxl__ev_fd_isregistered(&ctx->sigchld_selfpipe_efd)); */
 
     /* Now there should be no more events requested from the application: */
 
+    /*
     assert(LIBXL_LIST_EMPTY(&ctx->efds));
     assert(LIBXL_TAILQ_EMPTY(&ctx->etimes));
     assert(LIBXL_LIST_EMPTY(&ctx->evtchns_waiting));
     assert(LIBXL_LIST_EMPTY(&ctx->aos_inprogress));
+    */
 
     if (ctx->xch) xc_interface_close(ctx->xch);
     libxl_version_info_dispose(&ctx->version_info);
@@ -1043,6 +1046,7 @@ int libxl_domain_unpause(libxl_ctx *ctx,
         goto out;
     }
 
+#if 0
     if (type == LIBXL_DOMAIN_TYPE_HVM) {
         rc = libxl__domain_resume_device_model(gc, domid);
         if (rc < 0) {
@@ -1051,6 +1055,7 @@ int libxl_domain_unpause(libxl_ctx *ctx,
             goto out;
         }
     }
+#endif
     ret = xc_domain_unpause(ctx->xch, domid);
     if (ret<0) {
         LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "unpausing domain %d", domid);
