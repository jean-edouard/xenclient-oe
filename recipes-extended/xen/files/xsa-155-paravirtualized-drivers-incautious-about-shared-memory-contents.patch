################################################################################
SHORT DESCRIPTION: 
################################################################################
XSA-155 (http://xenbits.xen.org/xsa/advisory-155.html)
paravirtualized drivers incautious about shared memory contents

################################################################################
LONG DESCRIPTION: 
################################################################################
Source: http://xenbits.xen.org/xsa/advisory-155.html
Patches: xsa155-xen-0001-xen-Add-RING_COPY_REQUEST.patch
         xsa155-xen-0002-blktap2-Use-RING_COPY_REQUEST.patch
         xsa155-xen-0003-libvchan-Read-prod-cons-only-once.patch

The compiler can emit optimizations in the PV backend drivers which can lead to
double fetch vulnerabilities. Specifically the shared memory between the
frontend and backend can be fetched twice (during which time the frontend can
alter the contents) possibly leading to arbitrary code execution in
backend.

Malicious guest administrators can cause denial of service.  If driver domains
are not in use, the impact can be a host crash, or privilege escalation.

################################################################################
CHANGELOG 
################################################################################
Added in OpenXT, Xen 4.3.4 patch-queue: Eric Chanudet <chanudete@ainfosec.com>

################################################################################
PATCHES 
################################################################################
Index: xen-4.6.1/tools/blktap2/drivers/block-log.c
===================================================================
--- xen-4.6.1.orig/tools/blktap2/drivers/block-log.c
+++ xen-4.6.1/tools/blktap2/drivers/block-log.c
@@ -494,11 +494,12 @@ static int ctl_kick(struct tdlog_state*
   reqstart = s->bring.req_cons;
   reqend = s->sring->req_prod;
 
+  xen_mb();
   BDPRINTF("ctl: ring kicked (start = %u, end = %u)", reqstart, reqend);
 
   while (reqstart != reqend) {
     /* XXX actually submit these! */
-    memcpy(&req, RING_GET_REQUEST(&s->bring, reqstart), sizeof(req));
+    RING_COPY_REQUEST(&s->bring, reqstart, &req);
     BDPRINTF("ctl: read request %"PRIu64":%u", req.sector, req.count);
     s->bring.req_cons = ++reqstart;
 
Index: xen-4.6.1/tools/blktap2/drivers/tapdisk-vbd.c
===================================================================
--- xen-4.6.1.orig/tools/blktap2/drivers/tapdisk-vbd.c
+++ xen-4.6.1/tools/blktap2/drivers/tapdisk-vbd.c
@@ -1569,7 +1569,7 @@ tapdisk_vbd_pull_ring_requests(td_vbd_t
 	int idx;
 	RING_IDX rp, rc;
 	td_ring_t *ring;
-	blkif_request_t *req;
+	blkif_request_t req;
 	td_vbd_request_t *vreq;
 
 	ring = &vbd->ring;
@@ -1580,16 +1580,16 @@ tapdisk_vbd_pull_ring_requests(td_vbd_t
 	xen_rmb();
 
 	for (rc = ring->fe_ring.req_cons; rc != rp; rc++) {
-		req = RING_GET_REQUEST(&ring->fe_ring, rc);
+		RING_COPY_REQUEST(&ring->fe_ring, rc, &req);
 		++ring->fe_ring.req_cons;
 
-		idx  = req->id;
+		idx  = req.id;
 		vreq = &vbd->request_list[idx];
 
 		ASSERT(list_empty(&vreq->next));
 		ASSERT(vreq->secs_pending == 0);
 
-		memcpy(&vreq->req, req, sizeof(blkif_request_t));
+		memcpy(&vreq->req, &req, sizeof(blkif_request_t));
 		vbd->received++;
 		vreq->vbd = vbd;
 
Index: xen-4.6.1/tools/libvchan/io.c
===================================================================
--- xen-4.6.1.orig/tools/libvchan/io.c
+++ xen-4.6.1/tools/libvchan/io.c
@@ -117,6 +117,7 @@ static inline int send_notify(struct lib
 static inline int raw_get_data_ready(struct libxenvchan *ctrl)
 {
 	uint32_t ready = rd_prod(ctrl) - rd_cons(ctrl);
+	xen_mb(); /* Ensure 'ready' is read only once. */
 	if (ready > rd_ring_size(ctrl))
 		/* We have no way to return errors.  Locking up the ring is
 		 * better than the alternatives. */
@@ -158,6 +159,7 @@ int libxenvchan_data_ready(struct libxen
 static inline int raw_get_buffer_space(struct libxenvchan *ctrl)
 {
 	uint32_t ready = wr_ring_size(ctrl) - (wr_prod(ctrl) - wr_cons(ctrl));
+	xen_mb(); /* Ensure 'ready' is read only once. */
 	if (ready > wr_ring_size(ctrl))
 		/* We have no way to return errors.  Locking up the ring is
 		 * better than the alternatives. */
Index: xen-4.6.1/xen/include/public/io/ring.h
===================================================================
--- xen-4.6.1.orig/xen/include/public/io/ring.h
+++ xen-4.6.1/xen/include/public/io/ring.h
@@ -212,6 +212,20 @@ typedef struct __name##_back_ring __name
 #define RING_GET_REQUEST(_r, _idx)                                      \
     (&((_r)->sring->ring[((_idx) & (RING_SIZE(_r) - 1))].req))
 
+/*
+ * Get a local copy of a request.
+ *
+ * Use this in preference to RING_GET_REQUEST() so all processing is
+ * done on a local copy that cannot be modified by the other end.
+ *
+ * Note that https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58145 may cause this
+ * to be ineffective where _req is a struct which consists of only bitfields.
+ */
+#define RING_COPY_REQUEST(_r, _idx, _req) do {				\
+	/* Use volatile to force the copy into _req. */			\
+	*(_req) = *(volatile typeof(_req))RING_GET_REQUEST(_r, _idx);	\
+} while (0)
+
 #define RING_GET_RESPONSE(_r, _idx)                                     \
     (&((_r)->sring->ring[((_idx) & (RING_SIZE(_r) - 1))].rsp))
 
