################################################################################
SHORT DESCRIPTION: 
################################################################################
Port git://xenbits.xen.org/xen.git:ab1f3cd4ab3127be52bcd2123578b44eaedd74a9

################################################################################
LONG DESCRIPTION: 
################################################################################
commit ab1f3cd4ab3127be52bcd2123578b44eaedd74a9
Author: Frediano Ziglio <frediano.ziglio@citrix.com>
Date:   Mon May 7 13:37:10 2012 +0100

    vgabios: Fix size computation overflow
    
    Remove an overflow computing width x height x bit which does
    not fit into a 16 bits. I wrote a routine to multiple these value
    and get the size required for framebuffer in segment unit (64k).
    
    Signed-off-by: Frediano Ziglio <frediano.ziglio@citrix.com>
    Committed-by: Keir Fraser <keir@xen.org>


################################################################################
CHANGELOG 
################################################################################
Ported to VGABIOS: Eric Chanudet, chanudete@ainfosec.com, 01/03/2015

################################################################################
REMOVAL 
################################################################################
This patch can be removed if a new version of Bochs VGABIOS is released with
this fix.

################################################################################
UPSTREAM PLAN 
################################################################################
This is already upstream in Xen repository.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None.

################################################################################
PATCHES
################################################################################
--- a/vbe.c
+++ b/vbe.c
@@ -754,6 +754,29 @@ lmulul:
   ret
 ASM_END
 
+ASM_START
+_size64:
+  push bp
+  mov  bp, sp
+  push dx
+
+; multiply bbp by yres first as results fit in 16bits
+; then multiply by xres
+  mov  ax, 8[bp]
+  mul  word 6[bp]
+  mul  word 4[bp]
+; divide by 2^19 ceiling result
+  add  ax, #0xffff
+  adc  dx, #7
+  mov  ax, dx
+  shr  ax, #3
+
+  pop  dx
+  pop  bp
+  ret
+ASM_END
+
+
 /** Function 00h - Return VBE Controller Information
  * 
  * Input:
@@ -857,7 +880,7 @@ Bit16u *AX;Bit16u ES;Bit16u DI;
 
         do
         {
-                size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
+                size_64k = size64(cur_info->info.XResolution, cur_info->info.YResolution, cur_info->info.BitsPerPixel);
 
                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
