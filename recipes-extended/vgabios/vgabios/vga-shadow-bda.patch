################################################################################
SHORT DESCRIPTION: 
################################################################################
Use QEMU shadow BDA IO port range to cache information VGABIOS will otherwise
store in the BDA.

################################################################################
LONG DESCRIPTION: 
################################################################################
Some guests corrupt the BDA memory region used by the BIOS early on. This
region is used by VGABIOS to store VGA related information, resulting in VBE
calls, issued after early boot, to fail in various ways.

This patch uses IO range 0x3802-0x383F exposed by QEMU to keep a sane cache of
the information VGABIOS would normaly store in the BDA.

It seems to be consensual that guests should not write over the BDA, but
VGABIOS using BDA region for information related to VBE calls seems dangerous
as well.

################################################################################
CHANGELOG 
################################################################################
Documented: Eric Chanudet, chanudete@ainfosec.com, 17/03/2014
Port to VGABIOS 0.7a: Eric Chanudet, chanudete@ainfosec.com, 01/03/2015

################################################################################
REMOVAL 
################################################################################
This patch can be removed on its own.
This patch needs to be removed if QEMU vga-shadow-bda.patch is removed.

################################################################################
UPSTREAM PLAN 
################################################################################
This is an OpenXT work-around. There is no plan to upstream this patch.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
Implements QEMU: vga-shadow-bda.patch.
Depends on VGABIOS: vga-shadow-bda.patch.

################################################################################
PATCHES
################################################################################
--- a/vbe.c
+++ b/vbe.c
@@ -714,15 +714,14 @@ ASM_START
 ; Has VBE display - Returns true if VBE display detected
 
 _vbe_has_vbe_display:
+;; remove workaround fix for 4b color
   push ds
-  push bx
-  mov  ax, # BIOSMEM_SEG
-  mov  ds, ax
-  mov  bx, # BIOSMEM_VBE_FLAG
-  mov  al, [bx]
+  push dx
+  mov  dx, # VGA_PORT_VBE_FLAG
+  in   al, dx
   and  al, #0x01
   xor  ah, ah
-  pop  bx
+  pop  dx
   pop  ds
   ret
 
@@ -737,11 +736,16 @@ vbe_init:
   jne  no_vbe_interface
   push ds
   push bx
+  push dx
   mov  ax, # BIOSMEM_SEG
   mov  ds, ax
   mov  bx, # BIOSMEM_VBE_FLAG
   mov  al, #0x01
   mov  [bx], al
+;; write flags to vga shadow ports also
+  mov   dx, # VGA_PORT_VBE_FLAG
+  out   dx, al
+  pop  dx
   pop  bx
   pop  ds
   mov  ax, # VBE_DISPI_ID5
@@ -1146,8 +1150,13 @@ Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u D
                 dispi_set_enable(VBE_DISPI_ENABLED | no_clear | lfb_flag);
                 vga_compat_setup();
 
-                write_word(BIOSMEM_SEG,BIOSMEM_VBE_MODE,BX);
-                write_byte(BIOSMEM_SEG,BIOSMEM_VIDEO_CTL,(0x60 | no_clear));
+                if ((inw(VGA_PORT_CONTROL_FLAGS) & VGA_SHADOW_ONLY) == 0)
+                {
+                  write_word(BIOSMEM_SEG,BIOSMEM_VBE_MODE,BX);
+                  write_byte(BIOSMEM_SEG,BIOSMEM_VIDEO_CTL,(0x60 | no_clear));
+                }
+                outw(VGA_PORT_VBE_MODE,BX);
+                outb(VGA_PORT_VIDEO_CTL,(0x60 | no_clear));
 
                 result = 0x4f;
         }
@@ -1178,24 +1187,22 @@ Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u D
  */
 ASM_START
 vbe_biosfn_return_current_mode:
-  push ds
-  mov  ax, # BIOSMEM_SEG
-  mov  ds, ax
+  push dx
   call dispi_get_enable
   and  ax, # VBE_DISPI_ENABLED
   jz   no_vbe_mode
-  mov  bx, # BIOSMEM_VBE_MODE
-  mov  ax, [bx]
+  mov  dx, # VGA_PORT_VBE_MODE
+  in   ax, dx
   mov  bx, ax
   jnz  vbe_03_ok
 no_vbe_mode:
-  mov  bx, # BIOSMEM_CURRENT_MODE
-  mov  al, [bx]
+  mov  dx, # VGA_PORT_CURRENT_MODE
+  in   al, dx
   mov  bl, al
   xor  bh, bh
 vbe_03_ok:
   mov  ax, #0x004f
-  pop  ds
+  pop  dx
   ret
 ASM_END
 
--- a/vgabios.c
+++ b/vgabios.c
@@ -114,12 +114,46 @@ static Bit16u biosfn_save_video_state();
 static Bit16u biosfn_restore_video_state();
 extern Bit8u video_save_pointer_table[];
 
+// Shadow helper macros.
+#define write_byte_and_shadow(tag, val)\
+{\
+  Bit8u d = val;\
+  if ((inw(VGA_PORT_CONTROL_FLAGS) & VGA_SHADOW_ONLY) == 0)\
+    write_byte(BIOSMEM_SEG, BIOSMEM_##tag, d);\
+  outb(VGA_PORT_##tag, d);\
+}
+
+#define write_word_and_shadow(tag, val)\
+{\
+  Bit16u d = val;\
+  if ((inw(VGA_PORT_CONTROL_FLAGS) & VGA_SHADOW_ONLY) == 0)\
+    write_word(BIOSMEM_SEG, BIOSMEM_##tag, d);\
+  outw(VGA_PORT_##tag, d);\
+}
+
+#define read_byte_shadow(tag)\
+  inb(VGA_PORT_##tag)
+
+#define read_word_shadow(tag)\
+  inw(VGA_PORT_##tag)
+
+
 // This is for compiling with gcc2 and gcc3
 #define ASM_START #asm
 #define ASM_END   #endasm
 
 ASM_START
 
+MACRO GET_CONTROL_FLAGS
+  push dx
+  push ax
+  mov  dx, # VGA_PORT_CONTROL_FLAGS
+  in   ax, dx
+  mov  bx, ax
+  pop  ax
+  pop  dx
+MEND
+
 MACRO SET_INT_VECTOR
   push ds
   xor ax, ax
@@ -231,7 +265,6 @@ vgabios_pci_data:
 .word 0 // reserved
 #endif
 
-
 ;; ============================================================================================
 ;;
 ;; Init Entry point
@@ -497,9 +530,12 @@ ASM_END
 ASM_START
 init_bios_area:
   push  ds
+  push  dx
   mov   ax, # BIOSMEM_SEG
   mov   ds, ax
 
+;; at this early point, always write both BDA and shadow ports
+
 ;; init detected hardware BIOS Area
   mov   bx, # BIOSMEM_INITIAL_MODE
   mov   ax, [bx]
@@ -510,31 +546,42 @@ init_bios_area:
 
 ;; Just for the first int10 find its children
 
-;; the default char height
+;; the default char height (actually a word?)
   mov   bx, # BIOSMEM_CHAR_HEIGHT
   mov   al, #0x10
   mov   [bx], al
+  mov   dx, # VGA_PORT_CHAR_HEIGHT
+  out   dx, al
 
 ;; Clear the screen 
   mov   bx, # BIOSMEM_VIDEO_CTL
   mov   al, #0x60
   mov   [bx], al
+  mov   dx, # VGA_PORT_VIDEO_CTL
+  out   dx, al
 
 ;; Set the basic screen we have
   mov   bx, # BIOSMEM_SWITCHES
   mov   al, #0xf9
   mov   [bx], al
+  mov   dx, # VGA_PORT_SWITCHES
+  out   dx, al
 
 ;; Set the basic modeset options
   mov   bx, # BIOSMEM_MODESET_CTL
   mov   al, #0x51
   mov   [bx], al
+  mov   dx, # VGA_PORT_MODESET_CTL
+  out   dx, al
 
 ;; Set the  default MSR
   mov   bx, # BIOSMEM_CURRENT_MSR
   mov   al, #0x09
   mov   [bx], al
+  mov   dx, # VGA_PORT_CURRENT_MSR
+  out   dx, al
 
+  pop dx
   pop ds
   ret
 
@@ -922,6 +969,7 @@ static void biosfn_set_video_mode(mode)
   Bit16u i,twidth,theightm1,cheight;
   Bit8u modeset_ctl,video_ctl,vga_switches;
   Bit16u crtc_addr;
+  Bit16u shadow_flags;
 
 #ifdef VBE
   if (vbe_has_vbe_display()) {
@@ -932,6 +980,14 @@ static void biosfn_set_video_mode(mode)
   // The real mode
   mode=mode&0x7f;
 
+ // On the first (or any) switch to mode 3, set the flag to use only the VGA shadow ports
+ if (mode==0x03) {
+   shadow_flags=inw(VGA_PORT_CONTROL_FLAGS);
+   shadow_flags=shadow_flags&VGA_SHADOW_ONLY;
+   outw(VGA_PORT_CONTROL_FLAGS,shadow_flags);
+   printf("VGABios set VGA_SHADOW_ONLY flag\n");
+  }
+
   // find the entry in the video modes
   line=find_vga_entry(mode);
 
@@ -948,13 +1004,13 @@ static void biosfn_set_video_mode(mode)
   cheight=video_param_table[vpti].cheight;
 
   // Read the bios vga control
-  video_ctl=read_byte(BIOSMEM_SEG,BIOSMEM_VIDEO_CTL);
+  video_ctl=read_byte_shadow(VIDEO_CTL);
 
   // Read the bios vga switches
-  vga_switches=read_byte(BIOSMEM_SEG,BIOSMEM_SWITCHES);
+  vga_switches=read_byte_shadow(SWITCHES);
 
   // Read the bios mode set control
-  modeset_ctl=read_byte(BIOSMEM_SEG,BIOSMEM_MODESET_CTL);
+  modeset_ctl=read_byte_shadow(MODESET_CTL);
 
   // Then we know the number of lines
   // FIXME
@@ -1040,24 +1096,24 @@ static void biosfn_set_video_mode(mode)
   }
 
  // Set the BIOS mem
- write_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE,mode);
- write_word(BIOSMEM_SEG,BIOSMEM_NB_COLS,twidth);
- write_word(BIOSMEM_SEG,BIOSMEM_PAGE_SIZE,*(Bit16u *)&video_param_table[vpti].slength_l);
- write_word(BIOSMEM_SEG,BIOSMEM_CRTC_ADDRESS,crtc_addr);
- write_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS,theightm1);
- write_word(BIOSMEM_SEG,BIOSMEM_CHAR_HEIGHT,cheight);
- write_byte(BIOSMEM_SEG,BIOSMEM_VIDEO_CTL,(0x60|noclearmem));
- write_byte(BIOSMEM_SEG,BIOSMEM_SWITCHES,0xF9);
- write_byte(BIOSMEM_SEG,BIOSMEM_MODESET_CTL,read_byte(BIOSMEM_SEG,BIOSMEM_MODESET_CTL)&0x7f);
+ write_byte_and_shadow(CURRENT_MODE,mode);
+ write_word_and_shadow(NB_COLS,twidth);
+ write_word_and_shadow(PAGE_SIZE,*(Bit16u *)&video_param_table[vpti].slength_l);
+ write_word_and_shadow(CRTC_ADDRESS,crtc_addr);
+ write_byte_and_shadow(NB_ROWS,theightm1);
+ write_word_and_shadow(CHAR_HEIGHT,cheight);
+ write_byte_and_shadow(VIDEO_CTL,(0x60|noclearmem));
+ write_byte_and_shadow(SWITCHES,0xF9);
+ write_byte_and_shadow(MODESET_CTL,read_byte_shadow(MODESET_CTL)&0x7f);
 
  // FIXME We nearly have the good tables. to be reworked
- write_byte(BIOSMEM_SEG,BIOSMEM_DCC_INDEX,0x08);    // 8 is VGA should be ok for now
- write_word(BIOSMEM_SEG,BIOSMEM_VS_POINTER, video_save_pointer_table);
- write_word(BIOSMEM_SEG,BIOSMEM_VS_POINTER+2, 0xc000);
+ write_byte_and_shadow(DCC_INDEX,0x08);    // 8 is VGA should be ok for now
+ write_word_and_shadow(VS_POINTER, video_save_pointer_table);
+ write_word_and_shadow(VS_POINTER+2, 0xc000);
 
  // FIXME
- write_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MSR,0x00); // Unavailable on vanilla vga, but...
- write_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_PAL,0x00); // Unavailable on vanilla vga, but...
+ write_byte_and_shadow(CURRENT_MSR,0x00); // Unavailable on vanilla vga, but...
+ write_byte_and_shadow(CURRENT_PAL,0x00); // Unavailable on vanilla vga, but...
  
  // Set cursor shape
  if(vga_modes[line].class==TEXT)
@@ -1119,10 +1175,10 @@ Bit8u CH;Bit8u CL;
  CL&=0x1f;
 
  curs=(CH<<8)+CL;
- write_word(BIOSMEM_SEG,BIOSMEM_CURSOR_TYPE,curs);
+ write_word_and_shadow(CURSOR_TYPE,curs);
 
- modeset_ctl=read_byte(BIOSMEM_SEG,BIOSMEM_MODESET_CTL);
- cheight = read_word(BIOSMEM_SEG,BIOSMEM_CHAR_HEIGHT);
+ modeset_ctl=read_byte_shadow(MODESET_CTL);
+ cheight = read_word_shadow(CHAR_HEIGHT);
  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
   {
    if(CL!=(CH+1))
@@ -1137,7 +1193,7 @@ Bit8u CH;Bit8u CL;
   }
 
  // CTRC regs 0x0a and 0x0b
- crtc_addr=read_word(BIOSMEM_SEG,BIOSMEM_CRTC_ADDRESS);
+ crtc_addr=read_word_shadow(CRTC_ADDRESS);
  outb(crtc_addr,0x0a);
  outb(crtc_addr+1,CH);
  outb(crtc_addr,0x0b);
@@ -1155,15 +1211,15 @@ Bit8u page;Bit16u cursor;
  if(page>7)return;
 
  // Bios cursor pos
- write_word(BIOSMEM_SEG, BIOSMEM_CURSOR_POS+2*page, cursor);
+ write_word_and_shadow(CURSOR_POS+2*page,cursor);
 
  // Set the hardware cursor
- current=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_PAGE);
+ current=read_byte_shadow(CURRENT_PAGE);
  if(page==current)
   {
    // Get the dimensions
-   nbcols=read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
-   nbrows=read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)+1;
+   nbcols=read_word_shadow(NB_COLS);
+   nbrows=read_byte_shadow(NB_ROWS)+1;
 
    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
  
@@ -1171,7 +1227,7 @@ Bit8u page;Bit16u cursor;
    address=SCREEN_IO_START(nbcols,nbrows,page)+xcurs+ycurs*nbcols;
    
    // CRTC regs 0x0e and 0x0f
-   crtc_addr=read_word(BIOSMEM_SEG,BIOSMEM_CRTC_ADDRESS);
+   crtc_addr=read_word_shadow(CRTC_ADDRESS);
    outb(crtc_addr,0x0e);
    outb(crtc_addr+1,(address&0xff00)>>8);
    outb(crtc_addr,0x0f);
@@ -1191,8 +1247,8 @@ Bit8u page;Bit16u *shape;Bit16u *pos;
 
  if(page>7)return;
  // FIXME should handle VGA 14/16 lines
- write_word(ss,shape,read_word(BIOSMEM_SEG,BIOSMEM_CURSOR_TYPE));
- write_word(ss,pos,read_word(BIOSMEM_SEG,BIOSMEM_CURSOR_POS+page*2));
+ write_word(ss,shape,read_word_shadow(CURSOR_TYPE));
+ write_word(ss,pos,read_word_shadow(CURSOR_POS+page*2));
 }
 
 // --------------------------------------------------------------------------------------------
@@ -1206,7 +1262,7 @@ Bit8u page;
  if(page>7)return;
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
 
@@ -1216,12 +1272,12 @@ Bit8u page;
  if(vga_modes[line].class==TEXT)
   {
    // Get the dimensions
-   nbcols=read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
-   nbrows=read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)+1;
+   nbcols=read_word_shadow(NB_COLS);
+   nbrows=read_byte_shadow(NB_ROWS)+1;
  
    // Calculate the address knowing nbcols nbrows and page num
    address=SCREEN_MEM_START(nbcols,nbrows,page);
-   write_word(BIOSMEM_SEG,BIOSMEM_CURRENT_START,address);
+   write_word_and_shadow(CURRENT_START,address);
 
    // Start address
    address=SCREEN_IO_START(nbcols,nbrows,page);
@@ -1232,14 +1288,14 @@ Bit8u page;
   }
 
  // CRTC regs 0x0c and 0x0d
- crtc_addr=read_word(BIOSMEM_SEG,BIOSMEM_CRTC_ADDRESS);
+ crtc_addr=read_word_shadow(CRTC_ADDRESS);
  outb(crtc_addr,0x0c);
  outb(crtc_addr+1,(address&0xff00)>>8);
  outb(crtc_addr,0x0d);
  outb(crtc_addr+1,address&0x00ff);
 
  // And change the BIOS page
- write_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_PAGE,page);
+ write_byte_and_shadow(CURRENT_PAGE,page);
 
 #ifdef DEBUG
  printf("Set active page %02x address %04x\n",page,address);
@@ -1331,17 +1387,17 @@ Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u
  if(cul>clr)return;
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
 
  // Get the dimensions
- nbrows=read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)+1;
- nbcols=read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
+ nbrows=read_byte_shadow(NB_ROWS)+1;
+ nbcols=read_word_shadow(NB_COLS);
 
  // Get the current page
  if(page==0xFF)
-  page=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_PAGE);
+  page=read_byte_shadow(CURRENT_PAGE);
 
  if(rlr>=nbrows)rlr=nbrows-1;
  if(clr>=nbcols)clr=nbcols-1;
@@ -1474,7 +1530,7 @@ Bit8u page;Bit16u *car;
  Bit16u cursor,dummy;
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
 
@@ -1483,8 +1539,8 @@ Bit8u page;Bit16u *car;
  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
 
  // Get the dimensions
- nbrows=read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)+1;
- nbcols=read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
+ nbrows=read_byte_shadow(NB_ROWS)+1;
+ nbcols=read_word_shadow(NB_COLS);
 
  if(vga_modes[line].class==TEXT)
   {
@@ -1675,7 +1731,7 @@ Bit8u car;Bit8u page;Bit8u attr;Bit16u c
  Bit16u cursor,dummy;
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
 
@@ -1684,8 +1740,8 @@ Bit8u car;Bit8u page;Bit8u attr;Bit16u c
  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
 
  // Get the dimensions
- nbrows=read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)+1;
- nbcols=read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
+ nbrows=read_byte_shadow(NB_ROWS)+1;
+ nbcols=read_word_shadow(NB_COLS);
 
  if(vga_modes[line].class==TEXT)
   {
@@ -1733,7 +1789,7 @@ Bit8u car;Bit8u page;Bit8u attr;Bit16u c
  Bit16u cursor,dummy;
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
 
@@ -1742,8 +1798,8 @@ Bit8u car;Bit8u page;Bit8u attr;Bit16u c
  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
 
  // Get the dimensions
- nbrows=read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)+1;
- nbcols=read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
+ nbrows=read_byte_shadow(NB_ROWS)+1;
+ nbcols=read_word_shadow(NB_COLS);
 
  if(vga_modes[line].class==TEXT)
   {
@@ -1872,7 +1928,7 @@ static void biosfn_write_pixel (BH,AL,CX
  Bit16u addr;
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
  if(vga_modes[line].class==TEXT)return;
@@ -1881,7 +1937,7 @@ static void biosfn_write_pixel (BH,AL,CX
   {
    case PLANAR4:
    case PLANAR1:
-     addr = CX/8+DX*read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
+     addr = CX/8+DX*read_word_shadow(NB_COLS);
      mask = 0x80 >> (CX & 0x07);
      outw(VGAREG_GRDC_ADDRESS, (mask << 8) | 0x08);
      outw(VGAREG_GRDC_ADDRESS, 0x0205);
@@ -1934,7 +1990,7 @@ ASM_END
      write_byte(0xb800,addr,data);
      break;
    case LINEAR8:
-     addr=CX+DX*(read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS)*8);
+     addr=CX+DX*(read_word_shadow(NB_COLS)*8);
      write_byte(0xa000,addr,AL);
      break;
 #ifdef DEBUG
@@ -1952,7 +2008,7 @@ static void biosfn_read_pixel (BH,CX,DX,
  Bit16u ss=get_SS();
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
  if(vga_modes[line].class==TEXT)return;
@@ -1961,7 +2017,7 @@ static void biosfn_read_pixel (BH,CX,DX,
   {
    case PLANAR4:
    case PLANAR1:
-     addr = CX/8+DX*read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
+     addr = CX/8+DX*read_word_shadow(NB_COLS);
      mask = 0x80 >> (CX & 0x07);
      attr = 0x00;
      for(i=0;i<4;i++)
@@ -1985,7 +2041,7 @@ static void biosfn_read_pixel (BH,CX,DX,
       }
      break;
    case LINEAR8:
-     addr=CX+DX*(read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS)*8);
+     addr=CX+DX*(read_word_shadow(NB_COLS)*8);
      attr=read_byte(0xa000,addr);
      break;
    default:
@@ -2008,10 +2064,10 @@ Bit8u car;Bit8u page;Bit8u attr;Bit8u fl
 
  // special case if page is 0xff, use current page
  if(page==0xff)
-  page=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_PAGE);
+  page=read_byte_shadow(CURRENT_PAGE);
 
  // Get the mode
- mode=read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE);
+ mode=read_byte_shadow(CURRENT_MODE);
  line=find_vga_entry(mode);
  if(line==0xFF)return;
 
@@ -2020,8 +2076,8 @@ Bit8u car;Bit8u page;Bit8u attr;Bit8u fl
  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
 
  // Get the dimensions
- nbrows=read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)+1;
- nbcols=read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
+ nbrows=read_byte_shadow(NB_ROWS)+1;
+ nbcols=read_word_shadow(NB_COLS);
 
  switch(car)
   {
@@ -2119,25 +2175,30 @@ Bit8u car;Bit8u page;Bit8u attr;Bit8u fl
 // --------------------------------------------------------------------------------------------
 ASM_START
 biosfn_get_video_mode:
-  push  ds
-  mov   ax, # BIOSMEM_SEG
-  mov   ds, ax
-  push  bx
-  mov   bx, # BIOSMEM_CURRENT_PAGE
-  mov   al, [bx]
-  pop   bx
+;; int10 ah=0x0f
+  push  dx
+  mov   dx, # VGA_PORT_CURRENT_PAGE
+  in    al, dx
+;; active page in bh
   mov   bh, al
   push  bx
-  mov   bx, # BIOSMEM_VIDEO_CTL
-  mov   ah, [bx]
+  mov   dx, # VGA_PORT_VIDEO_CTL
+  in    al, dx
+  mov   ah, al
   and   ah, #0x80
-  mov   bx, # BIOSMEM_CURRENT_MODE
-  mov   al, [bx]
+  mov   dx, # VGA_PORT_CURRENT_MODE
+  in    al, dx
   or    al, ah
-  mov   bx, # BIOSMEM_NB_COLS
-  mov   ah, [bx]
+;; current video mode in al
+  push  ax
+  mov   dx, # VGA_PORT_NB_COLS
+  in    al, dx
+  mov   bx, ax
+  pop   ax
+;; number of cols in ah
+  mov   ah, bl
   pop   bx
-  pop   ds
+  pop   dx
   ret
 ASM_END
 
@@ -2710,7 +2771,7 @@ static void set_scan_lines(lines) Bit8u
  Bit16u crtc_addr,cols,page,vde;
  Bit8u crtc_r9,ovl,rows;
 
- crtc_addr = read_word(BIOSMEM_SEG,BIOSMEM_CRTC_ADDRESS);
+ crtc_addr = read_word_shadow(CRTC_ADDRESS);
  outb(crtc_addr, 0x09);
  crtc_r9 = inb(crtc_addr+1);
  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
@@ -2723,16 +2784,16 @@ static void set_scan_lines(lines) Bit8u
   {
    biosfn_set_cursor_shape(lines-4,lines-3);
   }
- write_word(BIOSMEM_SEG,BIOSMEM_CHAR_HEIGHT, lines);
+ write_word_and_shadow(CHAR_HEIGHT, lines);
  outb(crtc_addr, 0x12);
  vde = inb(crtc_addr+1);
  outb(crtc_addr, 0x07);
  ovl = inb(crtc_addr+1);
  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
  rows = vde / lines;
- write_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS, rows-1);
- cols = read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS);
- write_word(BIOSMEM_SEG,BIOSMEM_PAGE_SIZE, rows * cols * 2);
+ write_byte_and_shadow(NB_ROWS, rows-1);
+ cols = read_word_shadow(NB_COLS);
+ write_word_and_shadow(PAGE_SIZE, rows * cols * 2);
 }
 
 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
@@ -2964,33 +3025,38 @@ Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *C
     #endif
     return;
   }
+
  // Set byte/char of on screen font
- write_word(ss,CX,(Bit16u)read_byte(BIOSMEM_SEG,BIOSMEM_CHAR_HEIGHT));
+ write_word(ss,CX,(Bit16u)read_byte_shadow(CHAR_HEIGHT));
 
  // Set Highest char row
- write_word(ss,DX,(Bit16u)read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS));
+ write_word(ss,DX,(Bit16u)read_byte_shadow(NB_ROWS));
 }
 
 // --------------------------------------------------------------------------------------------
 ASM_START
 biosfn_get_ega_info:
-  push  ds
+;; int10 ah=0x12 bl=0x10
+  push  dx
   push  ax
-  mov   ax, # BIOSMEM_SEG
-  mov   ds, ax
+;; feature connector bits in ch
   xor   ch, ch
-  mov   bx, # BIOSMEM_SWITCHES
-  mov   cl, [bx]
+  mov   dx, # VGA_PORT_SWITCHES
+  in    al, dx
+  mov   cl, al
+;; switches in cl
   and   cl, #0x0f
-  mov   bx, # BIOSMEM_CRTC_ADDRESS
-  mov   ax, [bx]
+  mov   dx, # VGA_PORT_CRTC_ADDRESS
+  in    ax, dx
+;; adapter memory 256+ in bl
   mov   bx, #0x0003
   cmp   ax, # VGAREG_MDA_CRTC_ADDRESS
   jne   mode_ega_color
+;; color or monochrome in bh
   mov   bh, #0x01
 mode_ega_color:
   pop   ax
-  pop   ds
+  pop   dx
   ret
 ASM_END
 
@@ -3005,25 +3071,32 @@ static void biosfn_alternate_prtsc()
 // --------------------------------------------------------------------------------------------
 ASM_START
 biosfn_select_vert_res:
-
+;; int10 ah=0x12 bl=0x30
 ; res : 00 200 lines, 01 350 lines, 02 400 lines
 
   push  ds
   push  bx
   push  dx
+;; al has scan line value
   mov   dl, al
   mov   ax, # BIOSMEM_SEG
   mov   ds, ax
-  mov   bx, # BIOSMEM_MODESET_CTL
-  mov   al, [bx]
-  mov   bx, # BIOSMEM_SWITCHES
-  mov   ah, [bx]
+  mov   dx, # VGA_PORT_SWITCHES
+  in    al, dx
+  mov   ah, al
+  mov   dx, # VGA_PORT_MODESET_CTL
+  in    al, dx
   cmp   dl, #0x01
   je    vert_res_350
   jb    vert_res_200
   cmp   dl, #0x02
   je    vert_res_400
 #ifdef DEBUG
+;; need video bios segment here
+  push  ds
+  push  ax
+  mov   ax, #0xc000
+  mov   ds, ax
   mov   al, dl
   xor   ah, ah
   push  ax
@@ -3031,6 +3104,8 @@ biosfn_select_vert_res:
   push  bx
   call  _printf
   add   sp, #4
+  pop   ax
+  pop   ds
 #endif
   jmp   set_retcode
 vert_res_400:
@@ -3061,12 +3136,26 @@ vert_res_200:
   or    al, #0x80
   and   ah, #0xf0
   or    ah, #0x08
+
 set_vert_res:
+;; update BDA locations
+  GET_CONTROL_FLAGS()
+  test  bx, # VGA_SHADOW_ONLY
+  jnz   vert_res_skip_bda
   mov   bx, # BIOSMEM_MODESET_CTL
   mov   [bx], al
   mov   bx, # BIOSMEM_SWITCHES
   mov   [bx], ah
+vert_res_skip_bda:
+;; update VGA port shadow
+  mov   dx, # VGA_PORT_MODESET_CTL
+  out   dx, al
+  mov   al, ah
+  mov   dx, # VGA_PORT_SWITCHES
+  out   dx, al
+
 set_retcode:
+;; func code in al indicates supported
   mov   ax, #0x1212
   pop   dx
   pop   bx
@@ -3079,21 +3168,34 @@ msg_vert_res:
 .byte 0x0d,0x0a,0x00
 #endif
 
-
 biosfn_enable_default_palette_loading:
+;; int10 ah=0x12 bl=0x31
   push  ds
   push  bx
   push  dx
+;; al has color load state
   mov   dl, al
   and   dl, #0x01
   shl   dl, 3
   mov   ax, # BIOSMEM_SEG
   mov   ds, ax
-  mov   bx, # BIOSMEM_MODESET_CTL
-  mov   al, [bx]
+  push  dx
+  mov   dx, # VGA_PORT_MODESET_CTL
+  in    al, dx
+  pop   dx
   and   al, #0xf7
   or    al, dl
+;; update BDA locations
+  GET_CONTROL_FLAGS()
+  test  bx, # VGA_SHADOW_ONLY
+  jnz   default_palette_loading_skip_bda
+  mov   bx, # BIOSMEM_MODESET_CTL
   mov   [bx], al
+default_palette_loading_skip_bda:
+;; update VGA port shadow
+  mov   dx, # VGA_PORT_MODESET_CTL
+  out   dx, al
+;; func code in al indicates supported
   mov   ax, #0x1212
   pop   dx
   pop   bx
@@ -3102,8 +3204,10 @@ biosfn_enable_default_palette_loading:
 
 
 biosfn_enable_video_addressing:
+;; int10 ah=0x12 bl=0x32
   push  bx
   push  dx
+;; al has vidoe adapter state
   mov   bl, al
   and   bl, #0x01
   xor   bl, #0x01
@@ -3114,6 +3218,7 @@ biosfn_enable_video_addressing:
   or    al, bl
   mov   dx, # VGAREG_WRITE_MISC_OUTPUT
   out   dx, al
+;; func code in al indicates supported
   mov   ax, #0x1212
   pop   dx
   pop   bx
@@ -3121,20 +3226,32 @@ biosfn_enable_video_addressing:
 
 
 biosfn_enable_grayscale_summing:
+;; int10 ah=0x12 bl=0x33
   push  ds
   push  bx
   push  dx
+;; al has greyscale summing mode
   mov   dl, al
   and   dl, #0x01
   xor   dl, #0x01
   shl   dl, 1
   mov   ax, # BIOSMEM_SEG
   mov   ds, ax
-  mov   bx, # BIOSMEM_MODESET_CTL
-  mov   al, [bx]
+  mov   dx, # VGA_PORT_MODESET_CTL
+  in    al, dx
   and   al, #0xfd
   or    al, dl
+;; update BDA locations
+  GET_CONTROL_FLAGS()
+  test  bx, # VGA_SHADOW_ONLY
+  jnz   enable_grayscale_skip_bda
+  mov   bx, # BIOSMEM_MODESET_CTL
   mov   [bx], al
+enable_grayscale_skip_bda:
+;; update VGA port shadow
+  mov   dx, # VGA_PORT_MODESET_CTL
+  out   dx, al
+;; func code in al indicates supported
   mov   ax, #0x1212
   pop   dx
   pop   bx
@@ -3143,19 +3260,31 @@ biosfn_enable_grayscale_summing:
 
 
 biosfn_enable_cursor_emulation:
+;; int10 ah=0x12 bl=0x34
   push  ds
   push  bx
   push  dx
+;; al has cursor size
   mov   dl, al
   and   dl, #0x01
   xor   dl, #0x01
   mov   ax, # BIOSMEM_SEG
   mov   ds, ax
-  mov   bx, # BIOSMEM_MODESET_CTL
-  mov   al, [bx]
+  mov   dx, # VGA_PORT_MODESET_CTL
+  in    al, dx
   and   al, #0xfe
   or    al, dl
+;; update BDA locations
+  GET_CONTROL_FLAGS()
+  test  bx, # VGA_SHADOW_ONLY
+  jnz   enable_cursor_skip_bda
+  mov   bx, # BIOSMEM_MODESET_CTL
   mov   [bx], al
+enable_cursor_skip_bda:
+;; update VGA port shadow
+  mov   dx, # VGA_PORT_MODESET_CTL
+  out   dx, al
+;; func code in al indicates supported
   mov   ax, #0x1212
   pop   dx
   pop   bx
@@ -3213,6 +3342,7 @@ Bit8u flag;Bit8u page;Bit8u attr;Bit16u
 // --------------------------------------------------------------------------------------------
 ASM_START
 biosfn_group_1A:
+;; int10 ah=0x1a al=0x00 or 0x01
   cmp   al, #0x00
   je    biosfn_read_display_code
   cmp   al, #0x01
@@ -3221,28 +3351,41 @@ biosfn_group_1A:
   call  _unknown
 #endif
   ret
+
 biosfn_read_display_code:
-  push  ds
   push  ax
-  mov   ax, # BIOSMEM_SEG
-  mov   ds, ax
-  mov   bx, # BIOSMEM_DCC_INDEX
-  mov   al, [bx]
+  push  dx
+  mov   dx, # VGA_PORT_DCC_INDEX
+  in    al, dx
+;; alternate mode returned in bl
   mov   bl, al
+;; active display code in bh
   xor   bh, bh
+  pop   dx
   pop   ax
+;; al=0x1a indicates support
   mov   al, ah
-  pop   ds
   ret
+
 biosfn_set_display_code:
-  push  ds
+  push  dx
   push  ax
   push  bx
+  push  ds
   mov   ax, # BIOSMEM_SEG
   mov   ds, ax
+;; display codes passed in bx
   mov   ax, bx
+  GET_CONTROL_FLAGS()
+  test  bx, # VGA_SHADOW_ONLY
+  jnz   set_display_skip_bda
   mov   bx, # BIOSMEM_DCC_INDEX
   mov   [bx], al
+set_display_skip_bda:
+  mov   dx, # VGA_PORT_DCC_INDEX
+  out   dx, al
+  pop   ds
+;; back to video bios segment for print
 #ifdef DEBUG
   mov   al, ah
   xor   ah, ah
@@ -3254,8 +3397,9 @@ biosfn_set_display_code:
 #endif
   pop   bx
   pop   ax
+;; al=0x1a indicates support
   mov   al, ah
-  pop   ds
+  pop   dx
   ret
 
 #ifdef DEBUG
@@ -3277,7 +3421,7 @@ Bit16u BX;Bit16u ES;Bit16u DI;
  memcpyb(ES,DI+0x04,BIOSMEM_SEG,0x49,30);
  memcpyb(ES,DI+0x22,BIOSMEM_SEG,0x84,3);
  
- write_byte(ES,DI+0x25,read_byte(BIOSMEM_SEG,BIOSMEM_DCC_INDEX));
+ write_byte(ES,DI+0x25,read_byte_shadow(DCC_INDEX));
  write_byte(ES,DI+0x26,0);
  write_byte(ES,DI+0x27,16);
  write_byte(ES,DI+0x28,0);
@@ -3322,7 +3466,7 @@ static Bit16u biosfn_save_video_state (C
 {
     Bit16u i, v, crtc_addr, ar_index;
 
-    crtc_addr = read_word(BIOSMEM_SEG, BIOSMEM_CRTC_ADDRESS);
+    crtc_addr = read_word_shadow(CRTC_ADDRESS);
     if (CX & 1) {
         write_byte(ES, BX, inb(VGAREG_SEQU_ADDRESS)); BX++;
         write_byte(ES, BX, inb(crtc_addr)); BX++;
@@ -3365,22 +3509,22 @@ static Bit16u biosfn_save_video_state (C
         write_byte(ES, BX, 0); BX++;
     }
     if (CX & 2) {
-        write_byte(ES, BX, read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE)); BX++;
-        write_word(ES, BX, read_word(BIOSMEM_SEG,BIOSMEM_NB_COLS)); BX += 2;
-        write_word(ES, BX, read_word(BIOSMEM_SEG,BIOSMEM_PAGE_SIZE)); BX += 2;
-        write_word(ES, BX, read_word(BIOSMEM_SEG,BIOSMEM_CRTC_ADDRESS)); BX += 2;
-        write_byte(ES, BX, read_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS)); BX++;
-        write_word(ES, BX, read_word(BIOSMEM_SEG,BIOSMEM_CHAR_HEIGHT)); BX += 2;
-        write_byte(ES, BX, read_byte(BIOSMEM_SEG,BIOSMEM_VIDEO_CTL)); BX++;
-        write_byte(ES, BX, read_byte(BIOSMEM_SEG,BIOSMEM_SWITCHES)); BX++;
-        write_byte(ES, BX, read_byte(BIOSMEM_SEG,BIOSMEM_MODESET_CTL)); BX++;
-        write_word(ES, BX, read_word(BIOSMEM_SEG,BIOSMEM_CURSOR_TYPE)); BX += 2;
+        write_byte(ES, BX, read_byte_shadow(CURRENT_MODE)); BX++;
+        write_word(ES, BX, read_word_shadow(NB_COLS)); BX += 2;
+        write_word(ES, BX, read_word_shadow(PAGE_SIZE)); BX += 2;
+        write_word(ES, BX, read_word_shadow(CRTC_ADDRESS)); BX += 2;
+        write_byte(ES, BX, read_byte_shadow(NB_ROWS)); BX++;
+        write_word(ES, BX, read_word_shadow(CHAR_HEIGHT)); BX += 2;
+        write_byte(ES, BX, read_byte_shadow(VIDEO_CTL)); BX++;
+        write_byte(ES, BX, read_byte_shadow(SWITCHES)); BX++;
+        write_byte(ES, BX, read_byte_shadow(MODESET_CTL)); BX++;
+        write_word(ES, BX, read_word_shadow(CURSOR_TYPE)); BX += 2;
         for(i=0;i<8;i++) {
-            write_word(ES, BX, read_word(BIOSMEM_SEG, BIOSMEM_CURSOR_POS+2*i));
+            write_word(ES, BX, read_word_shadow(CURSOR_POS+2*i));
             BX += 2;
         }
-        write_word(ES, BX, read_word(BIOSMEM_SEG,BIOSMEM_CURRENT_START)); BX += 2;
-        write_byte(ES, BX, read_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_PAGE)); BX++;
+        write_word(ES, BX, read_word_shadow(CURRENT_START)); BX += 2;
+        write_byte(ES, BX, read_byte_shadow(CURRENT_PAGE)); BX++;
         /* current font */
         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
@@ -3466,22 +3610,22 @@ static Bit16u biosfn_restore_video_state
         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
     }
     if (CX & 2) {
-        write_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_MODE, read_byte(ES, BX)); BX++;
-        write_word(BIOSMEM_SEG,BIOSMEM_NB_COLS, read_word(ES, BX)); BX += 2;
-        write_word(BIOSMEM_SEG,BIOSMEM_PAGE_SIZE, read_word(ES, BX)); BX += 2;
-        write_word(BIOSMEM_SEG,BIOSMEM_CRTC_ADDRESS, read_word(ES, BX)); BX += 2;
-        write_byte(BIOSMEM_SEG,BIOSMEM_NB_ROWS, read_byte(ES, BX)); BX++;
-        write_word(BIOSMEM_SEG,BIOSMEM_CHAR_HEIGHT, read_word(ES, BX)); BX += 2;
-        write_byte(BIOSMEM_SEG,BIOSMEM_VIDEO_CTL, read_byte(ES, BX)); BX++;
-        write_byte(BIOSMEM_SEG,BIOSMEM_SWITCHES, read_byte(ES, BX)); BX++;
-        write_byte(BIOSMEM_SEG,BIOSMEM_MODESET_CTL, read_byte(ES, BX)); BX++;
-        write_word(BIOSMEM_SEG,BIOSMEM_CURSOR_TYPE, read_word(ES, BX)); BX += 2;
+        write_byte_and_shadow(CURRENT_MODE, read_byte(ES, BX)); BX++;
+        write_word_and_shadow(NB_COLS, read_word(ES, BX)); BX += 2;
+        write_word_and_shadow(PAGE_SIZE, read_word(ES, BX)); BX += 2;
+        write_word_and_shadow(CRTC_ADDRESS, read_word(ES, BX)); BX += 2;
+        write_byte_and_shadow(NB_ROWS, read_byte(ES, BX)); BX++;
+        write_word_and_shadow(CHAR_HEIGHT, read_word(ES, BX)); BX += 2;
+        write_byte_and_shadow(VIDEO_CTL, read_byte(ES, BX)); BX++;
+        write_byte_and_shadow(SWITCHES, read_byte(ES, BX)); BX++;
+        write_byte_and_shadow(MODESET_CTL, read_byte(ES, BX)); BX++;
+        write_word_and_shadow(CURSOR_TYPE, read_word(ES, BX)); BX += 2;
         for(i=0;i<8;i++) {
-            write_word(BIOSMEM_SEG, BIOSMEM_CURSOR_POS+2*i, read_word(ES, BX));
+            write_word_and_shadow(CURSOR_POS+2*i, read_word(ES, BX));
             BX += 2;
         }
-        write_word(BIOSMEM_SEG,BIOSMEM_CURRENT_START, read_word(ES, BX)); BX += 2;
-        write_byte(BIOSMEM_SEG,BIOSMEM_CURRENT_PAGE, read_byte(ES, BX)); BX++;
+        write_word_and_shadow(CURRENT_START, read_word(ES, BX)); BX += 2;
+        write_byte_and_shadow(CURRENT_PAGE, read_byte(ES, BX)); BX++;
         /* current font */
         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
--- a/vgatables.h
+++ b/vgatables.h
@@ -5,6 +5,7 @@
  */
 #define BIOSMEM_SEG 0x40
 
+#define BIOSMEM_EBDA_SEGMENT  0x0E
 #define BIOSMEM_INITIAL_MODE  0x10
 #define BIOSMEM_CURRENT_MODE  0x49
 #define BIOSMEM_NB_COLS       0x4A
@@ -29,12 +30,42 @@
 /*
  *
  * VGA port facility
+ *  - spinlock
+ *  - BDA shadow
  *
  */
 #define VGA_PORT_RANGE_BASE    0x3800
-#define VGA_PORT_RANGE_SIZE    0x2
+#define VGA_PORT_RANGE_SIZE    0x40
 
 #define VGA_PORT_SPIN_LOCK     0x3800 /* word */
+#define VGA_PORT_CONTROL_FLAGS 0x3802 /* word */
+#define VGA_PORT_RESERVED      0x3804 /* word */
+#define VGA_PORT_ALIGN         0x3806 /* byte */
+#define VGA_PORT_CURRENT_MODE  0x3807 /* byte */
+#define VGA_PORT_NB_COLS       0x3808 /* word */
+#define VGA_PORT_PAGE_SIZE     0x380A /* word */
+#define VGA_PORT_CURRENT_START 0x380C /* word */
+#define VGA_PORT_CURSOR_POS    0x380E /* 8 word ports - 16 bytes */
+#define VGA_PORT_CURSOR_TYPE   0x381E /* word */
+#define VGA_PORT_CHAR_HEIGHT   0x3820 /* word */
+#define VGA_PORT_CRTC_ADDRESS  0x3822 /* word */
+#define VGA_PORT_CURRENT_PAGE  0x3824 /* byte */
+#define VGA_PORT_CURRENT_MSR   0x3825 /* byte */
+#define VGA_PORT_CURRENT_PAL   0x3826 /* byte */
+#define VGA_PORT_NB_ROWS       0x3827 /* byte */
+#define VGA_PORT_VIDEO_CTL     0x3828 /* byte */
+#define VGA_PORT_SWITCHES      0x3829 /* byte */
+#define VGA_PORT_MODESET_CTL   0x382A /* byte */
+#define VGA_PORT_DCC_INDEX     0x382B /* byte */
+#define VGA_PORT_VS_POINTER    0x382C /* 2 word ports - 4 bytes */
+#define VGA_PORT_VBE_FLAG      0x3830 /* word */
+#define VGA_PORT_VBE_MODE      0x3832 /* word */
+#define VGA_PORT_VBE_POWER     0x3834 /* byte */
+                                      /* 0x3035 - 0x303F unused */
+
+#define VGA_SHADOW_NONE        0x0000
+#define VGA_SHADOW_ONLY        0x0001
+
 /*
  *
  * VGA registers
