From 771168cc33dc319a931a186613c9f791e26d8c1e Mon Sep 17 00:00:00 2001
From: Brendan Kerrigan <kerriganb@ainfosec.com>
Date: Tue, 17 Mar 2015 11:12:04 -0400
Subject: [PATCH] Stubdom support for ISO media changes after boot

--------------------------------------------------------------------------------
SHORT DESCRIPTION:
--------------------------------------------------------------------------------
Enable changing of ISO media in stubdom after boot

--------------------------------------------------------------------------------
LONG DESCRIPTION:
--------------------------------------------------------------------------------
In the previous device model (ioemu), media changes for ISO backed CDROMs were
communicated by the toolstack to the ioemu instance via xenstore. This
functionality was lost in the port, as qemu now expects qmp based notification
of ISO media changes. This code reintroduces the xenstore based mechanism for
listening to the toolstack for the stubdomain, and calls the appropriate qmp
code for the change.

Special care has to be taken to ensure that the state between the blkfront
and blkback drivers for the particular drive are correct. Basically the idea
is to not tell qemu about the change until the backend for the drive gets to
state 4.

--------------------------------------------------------------------------------
CHANGELOG
--------------------------------------------------------------------------------
Intial Commit: Brendan Kerrigan, kerriganb@ainfosec.com, 3/17/2015

--------------------------------------------------------------------------------
REMOVAL
--------------------------------------------------------------------------------
This patch could be removed if a mechanism to bridge qmp commands to the stubdom
is created, and appropriate toolstack changes are made to generate qmp commands
for the ISO change event. While the qemu changes to support this are likely
small, the toolstack changes would be considerable.

--------------------------------------------------------------------------------
UPSTREAM PLAN
--------------------------------------------------------------------------------
Until the use of Xenstore for communication is moved to qmp, it doesn't make
sense to upstream this. The move to qmp would be more palatable for upstream,
and provide finer grain control over anything the qmp interface exposes.

--------------------------------------------------------------------------------
INTERNAL DEPENDENCIES
--------------------------------------------------------------------------------
0001-generic-xenstore-watch-callback-support.patch
0015-atapi-pass-through.patch

--------------------------------------------------------------------------------
PATCHES
--------------------------------------------------------------------------------
---
 blockdev.c       |   9 ++-
 hw/xen_backend.c | 232 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 hw/xen_backend.h |   4 +
 xen-all.c        |   4 +
 4 files changed, 248 insertions(+), 1 deletion(-)

--- a/blockdev.c
+++ b/blockdev.c
@@ -20,7 +20,7 @@
 #include "qmp-commands.h"
 #include "trace.h"
 #include "sysemu/arch_init.h"
-
+#include "hw/xen_backend.h"
 static QTAILQ_HEAD(drivelist, DriveInfo) drives = QTAILQ_HEAD_INITIALIZER(drives);
 
 static const char *const if_name[IF_COUNT] = {
@@ -654,6 +654,13 @@ DriveInfo *drive_init(QemuOpts *opts, Bl
         goto err;
     }
 
+    if(xen_enabled() && media == MEDIA_CDROM && atapi_pt != 1) {
+      if(0 > xenstore_register_iso_dev(file, dinfo))
+	{
+	  error_report("Failed to register device with xenstore for media changes");
+	}
+    }
+
     if (bdrv_key_required(dinfo->bdrv))
         autostart = 0;
     return dinfo;
--- a/hw/xen_backend.c
+++ b/hw/xen_backend.c
@@ -37,6 +37,8 @@
 #include "hw.h"
 #include "char/char.h"
 #include "qemu/log.h"
+#include "block/block.h"
+#include "sysemu/blockdev.h"
 #include "xen_backend.h"
 #include "qmp-commands.h"
 
@@ -44,6 +46,7 @@
 
 #include "ui/xen-input.h"
 #include "xen-dmbus.h"
+#include "qemu/timer.h"
 
 /* ------------------------------------------------------------- */
 
@@ -55,6 +58,7 @@ const char *xen_protocol;
 
 /* private */
 static QTAILQ_HEAD(XenDeviceHead, XenDevice) xendevs = QTAILQ_HEAD_INITIALIZER(xendevs);
+
 static int debug = 0;
 
 /* ------------------------------------------------------------- */
@@ -784,6 +788,82 @@ static void xenstore_update_fe(char *wat
     xen_be_check_state(xendev);
 }
 
+/* OpenXT: Handle media changes through XenStore */
+#define BLKFRONT_READY_STATE "4"
+#define STUBDOMID(x) (x+1)
+
+struct IsoNode {
+            DriveInfo *drive;
+            char *iso_file;
+            char *xen_vbd_id;
+            char *frontend_state;
+            QEMUTimer *timer;
+            QTAILQ_ENTRY(IsoNode) next;
+};
+
+static QTAILQ_HEAD(IsoNodeHead, IsoNode) iso_list = QTAILQ_HEAD_INITIALIZER(iso_list);
+
+static void update_iso_cb(void *opaque)
+{
+    struct IsoNode *node = opaque;
+    Error *err = NULL;
+
+    if (!node) {
+        return;
+    }
+
+    // Don't try to do  the change if node->iso_file doesn't exist
+    if (access(node->iso_file, F_OK) != -1) {
+        qmp_change_blockdev(bdrv_get_device_name(node->drive->bdrv), node->iso_file, false, NULL, &err);
+    }
+
+    if (err) {
+        fprintf(stderr, "[OXT-ISO] Error: %s", error_get_pretty(err));
+    }
+}
+
+static void xenstore_update_iso(char *watch)
+{
+    static bool first_watch = true;
+    char *state = NULL;
+    struct IsoNode *node;
+    size_t len;
+    char path[XEN_BUFSIZE];
+
+    if(!xenstore || !watch)
+        return;
+
+    memset(path, 0x00, XEN_BUFSIZE);
+
+    QTAILQ_FOREACH(node, &iso_list, next)
+    {
+        // Important thing her e is the strstr, where the currently
+        // fired watch is matched with the drive of interest.
+        if (node && node->drive && node->iso_file
+            && node->xen_vbd_id && node->frontend_state
+            && strstr(watch, node->xen_vbd_id) && !first_watch) {
+
+            // Retrieve the backend state for this particular blkfront
+            // drive
+            snprintf(path, XEN_BUFSIZE, "%s/state", node->xen_vbd_id);
+            state = xs_read(xenstore, XBT_NULL, path, &len);
+
+            if (!state)
+                continue;
+
+            // Wait for blkfront<->blkback to get ready before changing
+            // the disk
+            if (!strcmp(state,BLKFRONT_READY_STATE)) {
+                qemu_mod_timer(node->timer, qemu_get_clock_ms(rt_clock) + 1000);
+            }
+
+            free(state);
+        }
+    }
+
+    first_watch = false;
+}
+
 static void xenstore_update(void *unused)
 {
     char **vec = NULL;
@@ -806,6 +886,11 @@ static void xenstore_update(void *unused
                &ptr, &ops) == 2) {
         ((xenstore_watch_cb_t)ptr)((void *)ops);
     }
+    /* OpenXT:
+     * Notify the emulator of a change in media */
+    if (!strcmp(vec[XS_WATCH_TOKEN], "iso")) {
+      xenstore_update_iso(vec[XS_WATCH_PATH]);
+    }
 
 cleanup:
     free(vec);
@@ -1076,3 +1161,149 @@ bool xenstore_is_legacy_res_only(void)
     return !!val;
 }
 
+/****************************************************
+ * OpenXT: Media change handling
+   Kind of a hack to get ISO updates when the UI changes it
+   from dom0.
+*/
+int xenstore_register_iso_dev(const char *file, DriveInfo* dinfo)
+{
+    struct IsoNode *node = NULL;
+
+    if (!file || !dinfo) {
+        fprintf(stderr, "Failed to register iso device due to incorrect parameters");
+        return -EINVAL;
+    }
+
+    node = g_malloc0(sizeof(*node));
+
+    if (!node) {
+        return -ENOMEM;
+    }
+
+    /*
+       We can't do our Xen business just yet, because hvm init domain hasn't
+       been called yet. So we have to save any information needed for registering
+       until later.
+    */
+
+    node->iso_file = g_strdup(file);
+    node->drive = dinfo;
+    node->xen_vbd_id = NULL;
+    node->frontend_state = NULL;
+    node->timer = qemu_new_timer_ms(rt_clock, update_iso_cb, node);
+
+    if (!node->iso_file || !node->timer) {
+        g_free(node);
+        return -ENOMEM;
+    }
+
+    QTAILQ_INSERT_TAIL(&iso_list, node, next);
+
+    return 0;
+}
+
+int xenstore_init_iso_dev(void)
+{
+    unsigned int dirNum = 0, i = 0;
+    char *dompath = NULL;
+    char **vbd_devs = NULL;
+    char path[XEN_BUFSIZE];
+    char token[XEN_BUFSIZE];
+
+    memset(path, 0x00, XEN_BUFSIZE);
+    memset(token, 0x00, XEN_BUFSIZE);
+
+    if (!xenstore) {
+        fprintf(stderr, "%s: No handle to xenstore", __FUNCTION__);
+        return -1;
+    }
+
+    // Stubdom domid is xen_domid+1
+    dompath = xs_get_domain_path(xenstore, STUBDOMID(xen_domid));
+
+    if (!dompath) {
+        fprintf(stderr, "%s: Failed to retrieve dompath", __FUNCTION__);
+        return -1;
+    }
+
+    snprintf(path, XEN_BUFSIZE, "%s/device/vbd", dompath);
+
+    // Find the virtual-device id that blkfront is using for this device
+    vbd_devs = xs_directory(xenstore, XBT_NULL, path, &dirNum);
+
+    if (!vbd_devs) {
+        return -1;
+    }
+
+    for (i = 0; i < dirNum; i++) {
+
+        if (!vbd_devs[i]) {
+            continue;
+        }
+
+        // Build paths to get necessary information from Xenstore
+        // Check the device type as CDROM, and get the backend path
+        memset(path, 0x00, XEN_BUFSIZE);
+        snprintf(path, XEN_BUFSIZE, "%s/device/vbd/%s", dompath, vbd_devs[i]);
+        char *dev_type = xenstore_read_str(path, "device-type");
+        char *be = xenstore_read_str(path, "backend");
+
+        if (dev_type && be && !strcmp(dev_type, "cdrom")) {
+            // We need to watch the backend for this device now.
+            char *params = xenstore_read_str(be, "params");
+            struct IsoNode *node;
+
+            QTAILQ_FOREACH(node, &iso_list, next) {
+                if (node && params &&
+                    node->xen_vbd_id == NULL &&
+                    node->frontend_state == NULL) {
+                    // For mapping a fired watch to a specific device later
+                    node->xen_vbd_id = strdup(be);
+
+                    // Before the guest disk change can occur, make sure the state
+                    // of the specified blkfront device is ready
+                    memset(path, 0x00, XEN_BUFSIZE);
+                    snprintf(path, XEN_BUFSIZE, "%s/device/vbd/%s/state", dompath, vbd_devs[i]);
+                    node->frontend_state = strdup(path);
+                    break;
+                }
+            }
+
+            // Set up the watch on the backend vbd path params key
+            memset(path, 0x00, XEN_BUFSIZE);
+            snprintf(path, XEN_BUFSIZE, "%s/params", be);
+
+            if (!xs_watch(xenstore, path, "iso")) {
+                fprintf(stderr, "[OXT-ISO] Failed to install xenstore watch on path: %s", path);
+            }
+
+            if (be) {
+                free(be);
+                be = NULL;
+            }
+
+            if (dev_type) {
+                free(dev_type);
+                dev_type = NULL;
+            }
+
+            if (params) {
+                free(params);
+                params = NULL;
+            }
+        }
+    }
+
+    if (dompath) {
+        free(dompath);
+        dompath = NULL;
+    }
+
+    if (vbd_devs) {
+        free(vbd_devs);
+        vbd_devs = NULL;
+    }
+
+    return 0;
+}
--- a/hw/xen_backend.h
+++ b/hw/xen_backend.h
@@ -113,4 +113,7 @@ int xenstore_add_watch(const char *base,
 int xenstore_remove_watch(const char *base, const char *node,
                           xenstore_watch_cb_t cb, void *opaque);
 
+int xenstore_register_iso_dev(const char *file, DriveInfo *disk);
+int xenstore_init_iso_dev(void);
+
 #endif /* QEMU_HW_XEN_BACKEND_H */
--- a/xen-all.c
+++ b/xen-all.c
@@ -1197,6 +1197,10 @@ int xen_hvm_init(void)
     xen_be_register("qdisk", &xen_blkdev_ops);
 #endif
 
+    if (0 > xenstore_init_iso_dev()) {
+        fprintf(stderr, "%s: failed to initialize iso media changes, not fatal\n", __FUNCTION__);
+    }
+
     xen_read_physmap(state);
 
     return 0;
