################################################################################
SHORT DESCRIPTION: 
################################################################################
Expose a spinlock on IO port 0x3800.

################################################################################
LONG DESCRIPTION: 
################################################################################
reading 0x3800 returns 0x0 if locked, 0xffff else.
writing 0x3800 with anything !0 will take the lock.

VGABIOS was found to require some locking logic for its int10h handler. Having
an IO port to behave like a lock makes it much more easier to manage in VGABIOS
16b code.

################################################################################
CHANGELOG 
################################################################################
Documented: Eric Chanudet, chanudete@ainfosec.com, 17/03/2015
Port to QEMU 1.4: Eric Chanudet, chanudete@ainfosec.com, 01/03/2015

################################################################################
REMOVAL 
################################################################################
This patch is required by VGABIOS: vga-spinlock.patch.

################################################################################
UPSTREAM PLAN 
################################################################################
This is an OpenXT work-around. There is no plan to upstream this patch.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
Implemented by VGABIOS: vga-spinlock.patch.
Depended on by QEMU: vga-shadow-bda.patch.

################################################################################
PATCHES 
################################################################################
Index: qemu-1.4.0/hw/vga.c
===================================================================
--- qemu-1.4.0.orig/hw/vga.c	2016-06-02 23:31:18.405153380 +0200
+++ qemu-1.4.0/hw/vga.c	2016-06-02 23:32:00.734693310 +0200
@@ -1769,6 +1769,8 @@
 
 /*
  * graphic modes
+ *
+ * WARNING: s->locked must be held by the caller
  */
 static void vga_draw_graphic(VGACommonState *s, int full_update)
 {
@@ -2028,6 +2030,11 @@
 
     qemu_flush_coalesced_mmio_buffer();
 
+    if (__sync_lock_test_and_set(&s->locked, 1)) {
+        /* Try to take spinlock or bail */
+        return;
+    }
+
     if (ds_get_bits_per_pixel(s->ds) == 0) {
         /* nothing to do */
     } else {
@@ -2055,6 +2062,8 @@
             break;
         }
     }
+
+    __sync_lock_release(&s->locked);
 }
 
 /* force a full display refresh */
@@ -2435,6 +2444,7 @@
     s->invalidate = vga_invalidate_display;
     s->screen_dump = vga_screen_dump;
     s->text_update = vga_update_text;
+    s->locked = 0;
     switch (vga_retrace_method) {
     case VGA_RETRACE_DUMB:
         s->retrace = vga_dumb_retrace;
@@ -2467,6 +2477,34 @@
     PORTIO_END_OF_LIST(),
 };
 
+static uint32_t spinlock_ioport_read(void *opaque, uint32_t addr)
+{
+    VGACommonState *s = opaque;
+
+    (void) addr;
+    if (__sync_lock_test_and_set(&s->locked, 1)) {
+        /* Can't lock */
+        return 0;
+    } else {
+        /* Locked */
+        return 0xffff;
+    }
+}
+static void spinlock_ioport_write(void *opaque, uint32_t addr, uint32_t val)
+{
+    VGACommonState *s = opaque;
+
+    (void) addr;
+    if (val) {
+        __sync_lock_release(&s->locked);
+    }
+}
+
+static const MemoryRegionPortio oxt_portio_list[] = {
+    { 0, 1, 2, .read = spinlock_ioport_read, .write = spinlock_ioport_write }, /* 0x3800 */
+    PORTIO_END_OF_LIST(),
+};
+
 /* Used by both ISA and PCI */
 MemoryRegion *vga_init_io(VGACommonState *s,
                           const MemoryRegionPortio **vga_ports,
@@ -2492,6 +2530,7 @@
     const MemoryRegionPortio *vga_ports, *vbe_ports;
     PortioList *vga_port_list = g_new(PortioList, 1);
     PortioList *vbe_port_list = g_new(PortioList, 1);
+    PortioList *oxt_port_list = g_new(PortioList, 1);
 
     qemu_register_reset(vga_reset, s);
 
@@ -2513,6 +2552,8 @@
         portio_list_init(vbe_port_list, vbe_ports, s, "vbe");
         portio_list_add(vbe_port_list, address_space_io, 0x1ce);
     }
+    portio_list_init(oxt_port_list, oxt_portio_list, s, "openxt");
+    portio_list_add(oxt_port_list, address_space_io, VGA_OXT_BASE);
 }
 
 void vga_init_vbe(VGACommonState *s, MemoryRegion *system_memory)
Index: qemu-1.4.0/hw/vga_int.h
===================================================================
--- qemu-1.4.0.orig/hw/vga_int.h	2016-06-02 23:31:18.418486570 +0200
+++ qemu-1.4.0/hw/vga_int.h	2016-06-02 23:32:00.971357397 +0200
@@ -76,6 +76,9 @@
 #define CH_ATTR_SIZE (160 * 100)
 #define VGA_MAX_HEIGHT 2048
 
+#define VGA_OXT_BASE			0x3800
+#define VGA_OXT_SPINLOCK		VGA_OXT_BASE
+
 struct vga_precise_retrace {
     int64_t ticks_per_char;
     int64_t total_chars;
@@ -182,6 +185,8 @@
     vga_update_retrace_info_fn update_retrace_info;
     union vga_retrace retrace_info;
     uint8_t is_vbe_vmstate;
+    /* ioport spinlock */
+    int locked;
 } VGACommonState;
 
 static inline int c6_to_8(int v)
