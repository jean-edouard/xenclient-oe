################################################################################
SHORT DESCRIPTION: 
################################################################################

Backported fix for net queue flush, which affects Windows 7 guests.

################################################################################
LONG DESCRIPTION: 
################################################################################

commit 199ee608f0d08510b5c6c37f31a7fbff211d63c4
Author: Luigi Rizzo <rizzo@iet.unipi.it>
Date:   Tue Feb 5 17:53:31 2013 +0100

    net: fix qemu_flush_queued_packets() in presence of a hub
    
    When frontend and backend are connected through a hub as below
    (showing only one direction), and the frontend (or in general, all
    output ports of the hub) cannot accept more traffic, the backend
    queues packets in queue-A.
    
    When the frontend (or in general, one output port) becomes ready again,
    quemu tries to flush packets from queue-B, which is unfortunately empty.
    
      e1000.0 <--[queue B]-- hub0port0(hub)hub0port1 <--[queue A]-- tap.0
    
    To fix this i propose to introduce a new function net_hub_flush()
    which is called when trying to flush a queue connected to a hub.
    
    Signed-off-by: Luigi Rizzo <rizzo@iet.unipi.it>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>

################################################################################
REMOVAL 
################################################################################

qemu >= 199ee608f0d08510b5c6c37f31a7fbff211d63c4

################################################################################
UPSTREAM PLAN
################################################################################

Backported from qemu.git (199ee608f0d08510b5c6c37f31a7fbff211d63c4)

################################################################################
INTERNAL DEPENDENCIES 
################################################################################

None

Index: qemu-1.4.0/net/hub.c
===================================================================
--- qemu-1.4.0.orig/net/hub.c	2016-06-02 22:35:01.118633296 +0200
+++ qemu-1.4.0/net/hub.c	2016-06-02 22:56:18.701364558 +0200
@@ -338,3 +338,17 @@
         }
     }
 }
+
+bool net_hub_flush(NetClientState *nc)
+{
+    NetHubPort *port;
+    NetHubPort *source_port = DO_UPCAST(NetHubPort, nc, nc);
+    int ret = 0;
+
+    QLIST_FOREACH(port, &source_port->hub->ports, next) {
+        if (port != source_port) {
+            ret += qemu_net_queue_flush(port->nc.send_queue);
+        }
+    }
+    return ret ? true : false;
+}
Index: qemu-1.4.0/net/hub.h
===================================================================
--- qemu-1.4.0.orig/net/hub.h	2016-06-02 22:35:01.135299781 +0200
+++ qemu-1.4.0/net/hub.h	2016-06-02 22:56:18.768030497 +0200
@@ -21,5 +21,6 @@
 NetClientState *net_hub_find_client_by_name(int hub_id, const char *name);
 void net_hub_info(Monitor *mon);
 void net_hub_check_clients(void);
+bool net_hub_flush(NetClientState *nc);
 
 #endif /* NET_HUB_H */
Index: qemu-1.4.0/net/net.c
===================================================================
--- qemu-1.4.0.orig/net/net.c	2016-06-02 22:56:08.628141138 +0200
+++ qemu-1.4.0/net/net.c	2016-06-02 22:56:18.834696437 +0200
@@ -454,6 +454,12 @@
 {
     nc->receive_disabled = 0;
 
+    if (nc->peer && nc->peer->info->type == NET_CLIENT_OPTIONS_KIND_HUBPORT) {
+        if (net_hub_flush(nc->peer)) {
+            qemu_notify_event();
+        }
+        return;
+    }
     if (qemu_net_queue_flush(nc->send_queue)) {
         /* We emptied the queue successfully, signal to the IO thread to repoll
          * the file descriptor (for tap, for example).
