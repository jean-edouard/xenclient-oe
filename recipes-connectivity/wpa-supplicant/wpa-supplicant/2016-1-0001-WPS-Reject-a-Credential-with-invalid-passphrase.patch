WPA/WPA2-Personal passphrase is not allowed to include control
characters. Reject a Credential received from a WPS Registrar both as
STA (Credential) and AP (AP Settings) if the credential is for WPAPSK or
WPA2PSK authentication type and includes an invalid passphrase.

This fixes an issue where hostapd or wpa_supplicant could have updated
the configuration file PSK/passphrase parameter with arbitrary data from
an external device (Registrar) that may not be fully trusted. Should
such data include a newline character, the resulting configuration file
could become invalid and fail to be parsed.

Signed-off-by: Jouni Malinen <jouni@qca.qualcomm.com>

Modified for OpenXT
Signed-off-by: Christopher Clark <christopher.clark6@baesystems.com>

diff --git a/src/utils/common.c b/src/utils/common.c
index 1b8ea80..a28dd5b 100644
--- a/src/utils/common.c
+++ b/src/utils/common.c
@@ -361,3 +361,14 @@ void * __hide_aliasing_typecast(void *foo)
 {
 	return foo;
 }
+
+int has_ctrl_char(const u8 *data, size_t len)
+{
+   size_t i;
+
+   for (i = 0; i < len; i++) {
+       if (data[i] < 32 || data[i] == 127)
+           return 1;
+   }
+   return 0;
+}
diff --git a/src/utils/common.h b/src/utils/common.h
index f17bf69..18e77ab 100644
--- a/src/utils/common.h
+++ b/src/utils/common.h
@@ -443,6 +443,7 @@ void wpa_get_ntp_timestamp(u8 *buf);
 int wpa_snprintf_hex(char *buf, size_t buf_size, const u8 *data, size_t len);
 int wpa_snprintf_hex_uppercase(char *buf, size_t buf_size, const u8 *data,
 			       size_t len);
+int has_ctrl_char(const u8 *data, size_t len);
 
 #ifdef CONFIG_NATIVE_WINDOWS
 void wpa_unicode2ascii_inplace(TCHAR *str);
diff --git a/src/wps/wps_attr_process.c b/src/wps/wps_attr_process.c
index 4751bbc..9183a8d 100644
--- a/src/wps/wps_attr_process.c
+++ b/src/wps/wps_attr_process.c
@@ -264,7 +264,7 @@ static int wps_process_cred_802_1x_enabled(struct wps_credential *cred,
 }
 
 
-static void wps_workaround_cred_key(struct wps_credential *cred)
+static int wps_workaround_cred_key(struct wps_credential *cred)
 {
 	if (cred->auth_type & (WPS_AUTH_WPAPSK | WPS_AUTH_WPA2PSK) &&
 	    cred->key_len > 8 && cred->key_len < 64 &&
@@ -278,6 +278,16 @@ static void wps_workaround_cred_key(struct wps_credential *cred)
 			   "termination from ASCII passphrase");
 		cred->key_len--;
 	}
+
+    if (cred->auth_type & (WPS_AUTH_WPAPSK | WPS_AUTH_WPA2PSK) &&
+       (cred->key_len < 8 || has_ctrl_char(cred->key, cred->key_len))) {
+        wpa_printf(MSG_INFO, "WPS: Reject credential with invalid WPA/WPA2-Personal passphrase");
+        wpa_hexdump_ascii_key(MSG_INFO, "WPS: Network Key",
+                     cred->key, cred->key_len);
+        return -1;
+    }
+
+    return 0;
 }
 
 
@@ -303,9 +313,7 @@ int wps_process_cred(struct wps_parse_attr *attr,
 	    wps_process_cred_802_1x_enabled(cred, attr->dot1x_enabled))
 		return -1;
 
-	wps_workaround_cred_key(cred);
-
-	return 0;
+	return wps_workaround_cred_key(cred);
 }
 
 
@@ -324,7 +332,5 @@ int wps_process_ap_settings(struct wps_parse_attr *attr,
 	    wps_process_cred_mac_addr(cred, attr->mac_addr))
 		return -1;
 
-	wps_workaround_cred_key(cred);
-
-	return 0;
+	return wps_workaround_cred_key(cred);
 }
