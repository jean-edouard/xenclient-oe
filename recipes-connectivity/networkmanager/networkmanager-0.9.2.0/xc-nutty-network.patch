diff -ur NetworkManager-0.9.2.0.orig/src/dns-manager/nm-dns-manager.c NetworkManager-0.9.2.0/src/dns-manager/nm-dns-manager.c
--- NetworkManager-0.9.2.0.orig/src/dns-manager/nm-dns-manager.c	2012-06-28 17:37:49.000000000 +0000
+++ NetworkManager-0.9.2.0/src/dns-manager/nm-dns-manager.c	2012-06-29 13:58:42.000000000 +0000
@@ -52,7 +52,7 @@
 #endif
 
 #ifndef RESOLV_CONF
-#define RESOLV_CONF "/etc/resolv.conf"
+#define RESOLV_CONF "/var/volatile/etc/resolv.conf"
 #endif
 
 G_DEFINE_TYPE(NMDnsManager, nm_dns_manager, G_TYPE_OBJECT)
@@ -443,7 +443,8 @@
 #endif
 
 static gboolean
-update_resolv_conf (const char *domain,
+update_resolv_conf (const char *resolv_path,
+                    const char *domain,
                     char **searches,
                     char **nameservers,
                     const char *iface,
@@ -459,9 +460,9 @@
 	g_return_val_if_fail (error != NULL, FALSE);
 
 	/* Find the real path of resolv.conf; it could be a symlink to something */
-	resolv_conf_realpath = realpath (RESOLV_CONF, NULL);
+	resolv_conf_realpath = realpath (resolv_path, NULL);
 	if (!resolv_conf_realpath)
-		resolv_conf_realpath = strdup (RESOLV_CONF);
+		resolv_conf_realpath = strdup (resolv_path);
 
 	/* Build up the real path for the temp resolv.conf that we're about to
 	 * write out.
@@ -749,7 +750,7 @@
 #endif
 
 	if (success == FALSE)
-		success = update_resolv_conf (domain, searches, nameservers, iface, error);
+		success = update_resolv_conf (RESOLV_CONF, domain, searches, nameservers, iface, error);
 
 	if (success)
 		nm_system_update_dns ();
@@ -801,6 +802,86 @@
 	return memcmp (check, priv->hash, sizeof (check)) ? TRUE : FALSE;
 }
 
+static gboolean
+xc_rewrite_resolv_conf (NMDnsManager *self,
+            const char *iface,
+            NMIP4Config *config,
+            gboolean no_caching,
+            GError **error)
+{
+	NMDnsManagerPrivate *priv;
+	NMResolvConfData rc;
+	GSList *iter, *vpn_configs = NULL, *dev_configs = NULL, *other_configs = NULL;
+	const char *domain = NULL;
+	const char *nis_domain = NULL;
+	char **searches = NULL;
+	char **nameservers = NULL;
+	char **nis_servers = NULL;
+	int num, i, len;
+	gboolean success = FALSE, caching = FALSE;
+        char resolv_path[PATH_MAX];
+
+
+	rc.nameservers = g_ptr_array_new ();
+	rc.domain = NULL;
+	rc.searches = g_ptr_array_new ();
+	rc.nis_domain = NULL;
+	rc.nis_servers = g_ptr_array_new ();
+
+	if (config)
+		merge_one_ip4_config (&rc, config);
+
+	domain = rc.domain;
+
+	/* Per 'man resolv.conf', the search list is limited to 6 domains
+	 * totalling 256 characters.
+	 */
+	num = MIN (rc.searches->len, 6);
+	for (i = 0, len = 0; i < num; i++) {
+		len += strlen (rc.searches->pdata[i]) + 1; /* +1 for spaces */
+		if (len > 256)
+			break;
+	}
+	g_ptr_array_set_size (rc.searches, i);
+	if (rc.searches->len) {
+		g_ptr_array_add (rc.searches, NULL);
+		searches = (char **) g_ptr_array_free (rc.searches, FALSE);
+	} else
+		g_ptr_array_free (rc.searches, TRUE);
+
+	if (rc.nameservers->len) {
+		g_ptr_array_add (rc.nameservers, NULL);
+		nameservers = (char **) g_ptr_array_free (rc.nameservers, FALSE);
+	} else
+		g_ptr_array_free (rc.nameservers, TRUE);
+
+	if (rc.nis_servers->len) {
+		g_ptr_array_add (rc.nis_servers, NULL);
+		nis_servers = (char **) g_ptr_array_free (rc.nis_servers, FALSE);
+	} else
+		g_ptr_array_free (rc.nis_servers, TRUE);
+
+	nis_domain = rc.nis_domain;
+
+        strcpy(resolv_path, RESOLV_CONF);
+        strcat(resolv_path, ".");
+        strcat(resolv_path, iface);
+
+
+	if (success == FALSE)
+		success = update_resolv_conf (resolv_path, domain, searches, nameservers, iface, error);
+
+	if (searches)
+		g_strfreev (searches);
+	if (nameservers)
+		g_strfreev (nameservers);
+	if (nis_servers)
+		g_strfreev (nis_servers);
+
+	return success;
+}
+
+
 gboolean
 nm_dns_manager_add_ip4_config (NMDnsManager *mgr,
                                const char *iface,
@@ -841,6 +922,13 @@
 		g_clear_error (&error);
 	}
 
+        if (!xc_rewrite_resolv_conf (mgr, iface, config, FALSE, &error)) {
+                nm_log_warn ("LOGD_DNS, Could not commit DNS changes: (%d) %s",
+		             error ? error->code : -1,
+		             error && error->message ? error->message : "(unknown)");
+                g_clear_error (&error);
+        }
+
 	return TRUE;
 }
 
diff -ur NetworkManager-0.9.2.0.orig/src/nm-policy.c NetworkManager-0.9.2.0/src/nm-policy.c
--- NetworkManager-0.9.2.0.orig/src/nm-policy.c	2012-06-28 17:37:51.000000000 +0000
+++ NetworkManager-0.9.2.0/src/nm-policy.c	2012-06-29 16:13:57.000000000 +0000
@@ -80,36 +80,23 @@
 #define RESET_RETRIES_TIMER 300
 #define FAILURE_REASON_TAG "failure-reason"
 
-static NMDevice *
-get_best_ip4_device (NMManager *manager, NMActRequest **out_req)
+static gboolean 
+device_suitable_for_default_route (NMDevice *dev)
 {
-	GSList *devices, *iter;
-	NMDevice *best = NULL;
-	int best_prio = G_MAXINT;
-
-	g_return_val_if_fail (manager != NULL, NULL);
-	g_return_val_if_fail (NM_IS_MANAGER (manager), NULL);
-	g_return_val_if_fail (out_req != NULL, NULL);
-	g_return_val_if_fail (*out_req == NULL, NULL);
-
-	devices = nm_manager_get_devices (manager);
-	for (iter = devices; iter; iter = g_slist_next (iter)) {
-		NMDevice *dev = NM_DEVICE (iter->data);
 		NMActRequest *req;
 		NMConnection *connection;
 		NMIP4Config *ip4_config;
 		NMSettingIP4Config *s_ip4;
-		int prio;
 		guint i;
 		gboolean can_default = FALSE;
 		const char *method = NULL;
 
 		if (nm_device_get_state (dev) != NM_DEVICE_STATE_ACTIVATED)
-			continue;
+                        return FALSE;
 
 		ip4_config = nm_device_get_ip4_config (dev);
 		if (!ip4_config)
-			continue;
+                        return FALSE;
 
 		req = nm_device_get_act_request (dev);
 		g_assert (req);
@@ -122,7 +109,7 @@
 			method = nm_setting_ip4_config_get_method (s_ip4);
 
 		if (s_ip4 && !strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL))
-			continue;
+                        return FALSE;
 
 		/* Make sure at least one of this device's IP addresses has a gateway */
 		for (i = 0; i < nm_ip4_config_get_num_addresses (ip4_config); i++) {
@@ -136,18 +123,41 @@
 		}
 
 		if (!can_default && !NM_IS_DEVICE_MODEM (dev))
-			continue;
+                        return FALSE;
 
 		/* 'never-default' devices can't ever be the default */
 		if (   (s_ip4 && nm_setting_ip4_config_get_never_default (s_ip4))
 		    || nm_ip4_config_get_never_default (ip4_config))
-			continue;
+                        return FALSE;
+
+	return TRUE;
+}
+
+static NMDevice *
+get_best_ip4_device (NMManager *manager, NMActRequest **out_req)
+{
+	GSList *devices, *iter;
+	NMDevice *best = NULL;
+	int best_prio = G_MAXINT;
 
+	g_return_val_if_fail (manager != NULL, NULL);
+	g_return_val_if_fail (NM_IS_MANAGER (manager), NULL);
+	g_return_val_if_fail (out_req != NULL, NULL);
+	g_return_val_if_fail (*out_req == NULL, NULL);
+
+	devices = nm_manager_get_devices (manager);
+	for (iter = devices; iter; iter = g_slist_next (iter)) {
+		NMDevice *dev = NM_DEVICE (iter->data);
+		int prio;
+
+                if (!device_suitable_for_default_route(dev))
+			continue;
+                        
 		prio = nm_device_get_priority (dev);
 		if (prio > 0 && prio < best_prio) {
 			best = dev;
 			best_prio = prio;
-			*out_req = req;
+			*out_req = nm_device_get_act_request (dev);
 		}
 	}
 
@@ -449,8 +459,11 @@
 	best = get_best_ip4_device (policy->manager, &best_req);
 	if (!best)
 		goto out;
+
+#if 0 /*JMM force the update so the xc-nutty-network gets a shot at doing the crazy stuffs*/
 	if (!force_update && (best == policy->default_device4))
 		goto out;
+#endif
 
 	/* If a VPN connection is active, it is preferred */
 	vpns = nm_vpn_manager_get_active_connections (policy->vpn_manager);
@@ -502,6 +515,25 @@
 
 	/* The best device gets the default route if a VPN connection didn't */
 	if (!ip_iface || !ip4_config) {
+
+               /*JMM - Actually cycle through all of them, so that xc-nutty-network gets to fixup the other tables*/
+
+                devices = nm_manager_get_devices (policy->manager);
+                for (iter = devices; iter; iter = g_slist_next (iter)) {
+                        NMDevice *dev = NM_DEVICE (iter->data);
+
+                        if (!device_suitable_for_default_route(dev))
+                                continue;
+
+                        ip_iface = nm_device_get_ip_iface (dev);
+                        ip_ifindex = nm_device_get_ip_ifindex (dev);
+                        ip4_config = nm_device_get_ip4_config (dev);
+                        g_assert (ip4_config);
+                        addr = nm_ip4_config_get_address (ip4_config, 0);
+
+                        nm_system_replace_default_ip4_route (ip_ifindex, nm_ip4_address_get_gateway (addr), nm_ip4_config_get_mss (ip4_config));
+                }
+
 		connection = nm_act_request_get_connection (best_req);
 		ip_iface = nm_device_get_ip_iface (best);
 		ip_ifindex = nm_device_get_ip_ifindex (best);
diff -ur NetworkManager-0.9.2.0.orig/src/nm-system.c NetworkManager-0.9.2.0/src/nm-system.c
--- NetworkManager-0.9.2.0.orig/src/nm-system.c	2012-06-28 17:37:50.000000000 +0000
+++ NetworkManager-0.9.2.0/src/nm-system.c	2012-06-29 18:19:25.000000000 +0000
@@ -85,6 +85,82 @@
 	return FALSE;
 }
 
+static int
+xc_netlink_route_delete(int ifindex,
+        struct rtnl_route * route)
+{
+        int ret;
+        uint32_t table, aux_table = 30 + ifindex; /* network daemon maps these routing table indices */
+	struct nl_sock *nlh;
+
+	g_return_val_if_fail (route != NULL, FALSE);
+        nlh = nm_netlink_get_default_handle ();
+	g_return_val_if_fail (nlh != NULL, FALSE);
+        ret = rtnl_route_delete(nlh, route, 0);
+
+        table = rtnl_route_get_table(route);
+        rtnl_route_set_table(route,aux_table);
+        (void) rtnl_route_delete(nlh, route, 0);
+        rtnl_route_set_table(route,table);
+
+        return ret;
+}
+
+static void
+xc_route_add(int ifindex,
+        struct nl_sock *nlh,
+        struct rtnl_route *route,
+        int flags
+)
+{
+        guint32 table;
+        guint32 aux_table = 30 + ifindex; /* network daemon maps these routing table indices */
+
+        if (route && nlh)
+        {
+            table = rtnl_route_get_table(route);
+            rtnl_route_set_table(route, aux_table);
+            (void) rtnl_route_add(nlh, route, flags);   
+            rtnl_route_set_table(route, table);
+        }
+}
+
+static int 
+xc_netlink_route_add(int ifindex,
+        struct rtnl_route * route,
+        int family,
+        const void * dest, /* in_addr */
+        int dest_prefix,
+        const void * gateway, /* in_addr */
+        int flags)
+{
+	int ret;
+        char *iface = nm_netlink_index_to_iface (ifindex);
+	uint32_t metric; 
+	struct nl_sock *nlh = nm_netlink_get_default_handle ();
+
+	g_return_val_if_fail (nlh != NULL, FALSE);
+
+        if (!iface)
+        {
+	        ret = nm_netlink_route_add(route, family, dest, dest_prefix, gateway, flags);
+                return ret;
+        }
+        metric = rtnl_route_get_priority(route);
+
+        if (strncmp(iface, "brbridged", 9) != 0)
+                rtnl_route_set_priority(route,metric+1);
+
+	ret = nm_netlink_route_add(route, family, dest, dest_prefix, gateway, flags);
+        xc_route_add(ifindex, nlh, route, flags);
+
+        if (strncmp(iface, "brbridged", 9) != 0)
+                rtnl_route_set_priority(route,metric);
+
+        g_free (iface);
+        return ret;
+}
+
 static struct rtnl_route *
 nm_system_device_set_ip4_route (int ifindex, 
                                 guint32 ip4_dest,
@@ -108,7 +184,7 @@
 	g_return_val_if_fail (route != NULL, NULL);
 
 	/* Add the route */
-	err = nm_netlink_route_add(route, AF_INET, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
+	err = xc_netlink_route_add(ifindex, route, AF_INET, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
 	if (err == -NLE_OBJ_NOTFOUND && ip4_gateway) {
 		/* Gateway might be over a bridge; try adding a route to gateway first */
 		struct rtnl_route *route2;
@@ -116,11 +192,11 @@
 		route2 = nm_netlink_route_new (ifindex, AF_INET, mss, NULL);
 		if (route2) {
 			/* Add route to gateway over bridge */
-			err = nm_netlink_route_add(route2, AF_INET, &ip4_gateway, 32, NULL, 0);
+			err = xc_netlink_route_add(ifindex, route2, AF_INET, &ip4_gateway, 32, NULL, 0);
 			if (!err) {
-				err = nm_netlink_route_add(route, AF_INET, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
+				err = xc_netlink_route_add(ifindex, route, AF_INET, &ip4_dest, ip4_prefix, &ip4_gateway, 0);
 				if (err)
-					nm_netlink_route_delete (route2);
+					xc_netlink_route_delete (ifindex, route2);
 			}
 			rtnl_route_put (route2);
 		}
@@ -812,7 +888,7 @@
 	g_return_val_if_fail (route != NULL, NULL);
 
 	/* Add direct route to the gateway */
-	err = nm_netlink_route_add(route, AF_INET, &gw, 32, NULL, 0);
+	err = xc_netlink_route_add(ifindex, route, AF_INET, &gw, 32, NULL, 0);
 	if (err) {
 		char *iface = nm_netlink_index_to_iface (ifindex);
 
@@ -850,7 +926,7 @@
 	g_return_val_if_fail (route != NULL, -ENOMEM);
 
 	/* Add the new default route */
-	err = nm_netlink_route_add (route, AF_INET, &dst, 0, &gw, NLM_F_REPLACE);
+	err = xc_netlink_route_add (ifindex, route, AF_INET, &dst, 0, &gw, NLM_F_REPLACE);
 
 	rtnl_route_put (route);
 	return err;
@@ -902,7 +978,7 @@
 	/* Try adding the original route again */
 	err = replace_default_ip4_route (ifindex, int_gw, mss);
 	if (err != 0) {
-		nm_netlink_route_delete (gw_route);
+		xc_netlink_route_delete (ifindex, gw_route);
 		nm_log_err (LOGD_DEVICE | LOGD_IP4,
 		            "(%s): failed to set IPv4 default route (pass #2): %d",
 		            iface, err);
@@ -953,7 +1029,7 @@
 	/* Try adding the original route again */
 	err = replace_default_ip4_route (ifindex, gw, mss);
 	if (err != 0) {
-		nm_netlink_route_delete (gw_route);
+		xc_netlink_route_delete (ifindex, gw_route);
 		nm_log_err (LOGD_DEVICE | LOGD_IP4,
 		            "(%s): failed to set IPv4 default route (pass #2): %d",
 		            iface, err);
@@ -1105,9 +1181,10 @@
                   gpointer user_data)
 {
 	guint32 log_level = GPOINTER_TO_UINT (user_data);
+        gint32 ifindex = nm_netlink_iface_to_index (iface);
 
 	nm_log_dbg (log_level, "   deleting route");
-	if (!nm_netlink_route_delete (route))
+	if (!xc_netlink_route_delete (ifindex, route))
 		nm_log_err (LOGD_DEVICE, "(%s): failed to delete route", iface);
 
 	return NULL;
@@ -1196,9 +1273,11 @@
 	found = nm_netlink_foreach_route (ifindex, AF_INET, RT_SCOPE_LINK, FALSE,  find_route, config);
 	if (found) {
 		nlh = nm_netlink_get_default_handle ();
+		xc_netlink_route_delete (ifindex, found);
 		nm_netlink_route_delete (found);
 		rtnl_route_set_priority (found, priority);
 		rtnl_route_add (nlh, found, 0);
+		xc_route_add (ifindex, nlh, found, 0);
 		rtnl_route_put (found);
 	}
 }
